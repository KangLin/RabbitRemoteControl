# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

variables:
  SOURCE_DIR:  $CI_BUILDS_DIR/.cache/source
  TOOSL_DIR:   $CI_BUILDS_DIR/.cache/tools
  INSTALL_DIR: $CI_BUILDS_DIR/.cache/install

default:
  interruptible: false
  before_script:
    - echo "CI_BUILDS_DIR:$CI_BUILDS_DIR"
    - echo "CI_PROJECT_DIR:$CI_PROJECT_DIR"
    - echo "CI_PROJECT_PATH:$CI_PROJECT_PATH"
    - echo "pwd:`pwd`"
    - mkdir -p $SOURCE_DIR
    - mkdir -p $TOOSL_DIR
    - mkdir -p $INSTALL_DIR

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-ubuntu:       # This job runs in the build stage, which runs first.
  stage: build
  image: ${OS}:${TAG}
  parallel:
    matrix:
      - OS: "ubuntu"
        TAG: ["22.04", "20.04", "18.04"]
      - OS: "debian"
        TAG: ["stable"]

  script:
    - echo "pwd:`pwd`"
    - echo "INSTALL_DIR:$INSTALL_DIR"
    - apt update && apt upgrade -y
    - apt install -y gcc g++ make autoconf xvfb xpra \
        libglu1-mesa-dev libpulse-mainloop-glib0 \
        cmake build-essential \
        libusb-1.0-0-dev libvncserver-dev libpixman-1-dev libssh-dev \
        libtelnet-dev libqxmpp-dev libfuse-dev \
        debhelper fakeroot graphviz \
        qttools5-dev qttools5-dev-tools qtbase5-dev qtbase5-dev-tools \
        qtmultimedia5-dev qtlocation5-dev libqt5svg5-dev \
        qtwebengine5-dev libqtermwidget5-0-dev \
        libutf8proc-dev libpam0g-dev \
        libxkbcommon-dev libxkbcommon-x11-dev xorg-dev libx11-xcb-dev \
        libx11-dev libxfixes-dev

test:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "test..."
    - sleep 10
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
