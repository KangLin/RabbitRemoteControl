# https://snapcraft.io/docs/the-snap-format
# How Snapcraft builds snaps: https://snapcraft.io/docs/how-snapcraft-builds
# Snapcraft.yaml schema: https://snapcraft.io/docs/snapcraft-yaml-schema
name: rabbitremotecontrol
base: core22 # the base snap is the execution environment for this snap
version: '0.0.34'
type: app
license: GPL-3.0+
contact: kl222@126.com
donation:
  - https://gitlab.com/kl222/RabbitCommon/-/raw/master/Src/Resource/image/Contribute.png
issues: https://github.com/KangLin/RabbitRemoteControl/issues
summary: Rabbit remote control # 79 char long summary
description: |
  Rabbit remote control is  is a cross-platform,
  multi-protocol remote control software.
  .
  Allows you to use any device and system in anywhere and remotely manage
  any device and system in any way. 
  .
  It include remote desktop, remote control, remote terminal, player, network tools etc functions.
  .
  Author: Kang Lin <kl222@126.com>
  .
  Donation:
  .
  https://github.com/KangLin/RabbitCommon/raw/master/Src/Resource/image/Contribute.png
  .
  https://gitee.com/kl222/RabbitCommon/raw/master/Src/Resource/image/Contribute.png
  .
  https://gitlab.com/kl222/RabbitCommon/-/raw/master/Src/Resource/image/Contribute.png

architectures:
  - build-on: amd64
  - build-on: arm64

# - devel
# - stable
grade: stable # must be 'stable' to release into candidate/stable channels

# Confinement levels: https://snapcraft.io/docs/classic-confinement#heading--levels
# Classic confinement: https://snapcraft.io/docs/classic-confinement
# - devmode
# - strict
confinement: strict # devmode # use 'strict' once you have the right plugs and slots

# lifecycle: https://snapcraft.io/docs/parts-lifecycle
# Iterating over a build: https://snapcraft.io/docs/iterating-over-a-build
# Part directives: https://snapcraft.io/docs/snapcraft-yaml-schema#part-directives
parts:
  rabbitcommon:
    # see: https://snapcraft.io/docs/supported-plugins
    # See 'snapcraft plugins'
    plugin: dump # See: https://snapcraft.io/docs/dump-plugin
    source: https://github.com/KangLin/RabbitCommon.git
    source-type: git
    source-branch: master
    #source-depth: 1
    organize:
      '*': RabbitCommon/
    prime:
      - -*

  freerdp:
    # see: https://snapcraft.io/docs/supported-plugins
    # See 'snapcraft plugins'
    plugin: cmake
    source: https://github.com/FreeRDP/FreeRDP.git
    source-type: git
    source-tag: 3.15.0
    source-depth: 1
    build-packages:
      - libssl-dev
      - libcrypt-dev
      - libfuse3-dev
      - libpam0g-dev
      - libutf8proc-dev
      - libx11-dev
      - libxkbfile-dev
      - libusb-1.0-0-dev
      - libcjson-dev
      - libkrb5-dev
      - libicu-dev
      - libffi-dev
      # ffmpeg development headers and libraries
      - libavcodec-dev
      - libavformat-dev
      - libresample1-dev
      - libswscale-dev
      - libavutil-dev
      - libx264-dev
      - libx265-dev
      # PulseAudio client development headers and libraries
      - libpulse-dev
      - libcups2-dev # print development headers and libraries
    stage-packages:
      - libfuse3-3
      - libpam0g
      - libutf8proc2
      - libusb-1.0-0
      - libcjson1
      - icu-devtools
      - libcups2
      - libcupsimage2
      - libgssapi-krb5-2
      - libgssrpc4
      - libkadm5srv-mit12
      - libkadm5clnt-mit12
      - libjs-jquery
      - libswscale5
      - x264
      - x265
      - libkrb5-3
      - libxkbfile1
      - libpulse0 # PulseAudio client runtime libraries
      - libffi7
      - libzvbi0
      - x11-utils
    cmake-parameters:
      # See: https://snapcraft.io/docs/parts-environment-variables
      - -DCMAKE_BUILD_TYPE=Release
      - -DWITH_CLIENT=OFF
      - -DWITH_PLATFORM_SERVER=OFF
      - -DWITH_LIBSYSTEMD=off
      - -DWITH_MANPAGES=OFF
      - -DWITH_SAMPLE=OFF
      - -DWITH_CLIENT_SDL=OFF
      - -DWITH_PROXY_MODULES=OFF
      - -DWITH_KRB5=OFF
    stage:
      - -usr/share
      - -usr/bin
      - -usr/sbin
      - -usr/include
      - -etc
    prime:
      - -usr/local/include
      - -usr/local/bin
      - -usr/local/lib/cmake
      - -usr/local/lib/pkgconfig
      - -usr/local/lib/*.a
      - -usr/local/lib/**/*.a

  tigervnc:
    plugin: cmake
    source: https://github.com/KangLin/tigervnc.git
    source-type: git
    source-branch: master
    source-depth: 1
    build-packages:
      - libxkbcommon-dev
      - libxkbcommon-x11-dev
      - xorg-dev
      - libx11-xcb-dev
      - libx11-dev
      - libxfixes-dev
      - libxcb-randr0-dev
      - libxcb-shm0-dev
      - libxcb-xinerama0-dev
      - libxcb-composite0-dev
      - libxcomposite-dev
      - libxinerama-dev
      - libxcb1-dev
      - libx11-xcb-dev
      - libxcb-xfixes0-dev
      - libpixman-1-dev
      - libpam0g-dev
      - libutf8proc-dev
      - libusb-1.0-0-dev
      - gettext
    stage-packages:
      - libpixman-1-0
    cmake-parameters:
      - -DCMAKE_BUILD_TYPE=Release
      - -DBUILD_TESTS=OFF
      - -DBUILD_VIEWER=OFF
    stage:
      - -usr/share
    prime:
      - -usr/local

  pcapplusplus:
    # see: https://snapcraft.io/docs/supported-plugins
    # See 'snapcraft plugins'
    plugin: cmake
    source: https://github.com/seladb/PcapPlusPlus.git
    source-type: git
    source-tag: v24.09
    source-depth: 1
    build-packages:
      - libpcap-dev
    stage-packages:
      - libpcap0.8
    cmake-parameters:
      - -DCMAKE_BUILD_TYPE=Release
      - -DPCAPPP_BUILD_EXAMPLES=OFF
      - -DPCAPPP_BUILD_TESTS=OFF
      - -DPCAPPP_BUILD_TUTORIALS=OFF
      - -DPCAPPP_INSTALL=ON
    stage:
      - -usr/share
    prime:
      - -usr/local

  # qt:
  #   plugin: nil # See: https://snapcraft.io/docs/nil-plugin
  #   build-packages:
  #     - python3-pip
  #     - python3-pip-whl
  #     - python3-pipdeptree
  #     - cpio
  #   override-pull: |
  #     echo "override-pull ......"
  #   override-build: |
  #     echo "override-build ......"
  #     cd $SNAPCRAFT_PART_INSTALL
  #     if [ ! -d qt ]; then
  #         #pip install -U pip
  #         pip install aqtinstall
  #         echo "Download qt ..."
  #         export QTVERSION=6.8.0
  #         # See: https://ddalcino.github.io/aqt-list-server/
  #         if [ "`uname -m`" == "x86_64" ]; then
  #             aqt install-qt linux desktop ${QTVERSION} linux_gcc_64 -m qt5compat qtgraphs qtimageformats qtmultimedia qtscxml qtserialport
  #             mv ${QTVERSION}/gcc_64 qt
  #         elif [ "`uname -m`" == "aarch64" ]; then
  #             aqt install-qt linux_arm64 desktop ${QTVERSION} linux_gcc_arm64 -m qt5compat qtgraphs qtimageformats qtmultimedia qtscxml qtserialport
  #             mv ${QTVERSION}/gcc_arm64 qt
  #         fi
  #     fi
  #   stage:
  #     - qt
  #   prime:
  #     - qt/lib/**/*.so*
  #     - qt/translations
  #     - qt/plugins/**/*.so*

  rabbitremotecontrol:
    # See 'snapcraft plugins'
    # see: https://snapcraft.io/docs/supported-plugins
    plugin: cmake # See: https://snapcraft.io/docs/cmake-plugin
    source: .
    after:
      - tigervnc
      - rabbitcommon
      - freerdp
      - pcapplusplus
 #     - qt
    build-packages:
      - libcmark-dev
      - cmark
      # opengl development headers and libraries
      - libglx-dev
      - libgl1-mesa-dev
      - libglu1-mesa-dev
      # vulkan development headers and libraries
      - libvulkan-dev
      # openssl development headers and libraries
      - libssl-dev
      - libcrypt-dev
      # PulseAudio client development headers and libraries
      - libpulse-dev
      - libcups2-dev # print development headers and libraries
      - libvncserver-dev
      - libssh-dev
      - libtelnet-dev
      - libpcap-dev
    stage-packages:
      - libcmark0.30.2
      # opengl runtime libraries
      - libglx0
      - libgl1
      - libglu1-mesa
      # vulkan runtime libraries
      - libvulkan1
      # openssl runtime libraries
      - libssl3
      - libcrypt1
      # c and c++
      - libc6
      - libgcc-s1
      - libstdc++6
      # PulseAudio client runtime libraries
      - libpulse0
      - zlib1g
      - libssh-4
      - libvncserver1
      - libvncclient1
    cmake-parameters:
      # See: https://snapcraft.io/docs/parts-environment-variables
      - -DCMAKE_BUILD_TYPE=Release
      - -DRabbitCommon_ROOT=$CRAFT_STAGE/RabbitCommon/
      # - -DQT_ROOT=$CRAFT_STAGE/qt
      # - -DQT_DIR=$CRAFT_STAGE/qt/lib/cmake/Qt6
      # - -DQt6_ROOT=$CRAFT_STAGE/qt
      # - -DQt6_DIR=$CRAFT_STAGE/qt/lib/cmake/Qt6
      - -DCMAKE_MODULE_PATH=$CRAFT_STAGE/qt/lib/cmake
      - -DCMAKE_INSTALL_PREFIX=/opt/RabbitRemoteControl
      - -Dtigervnc_DIR=$CRAFT_STAGE/usr/local/lib/cmake/tigervnc
      - -DPcapPlusPlus_ROOT=$CRAFT_STAGE/usr/local
      - -DFreeRDP-Client_DIR=$CRAFT_STAGE/usr/local/lib/cmake/FreeRDP-Client3
      - -DFreeRDP_DIR=$CRAFT_STAGE/usr/local/lib/cmake/FreeRDP3
      - -DWinPR_DIR=$CRAFT_STAGE/usr/local/lib/cmake/WinPR3
      - -DFreeRDP-Shadow_DIR=$CRAFT_STAGE/usr/local/lib/cmake/FreeRDP-Shadow3
      - -DFreeRDP-Server_DIR=$CRAFT_STAGE/usr/local/lib/cmake/FreeRDP-Server3
    # build-environment:
    #   - LD_LIBRARY_PATH: "$CRAFT_STAGE/qt/lib:$LD_LIBRARY_PATH"
    #   - CMAKE_FIND_ROOT_PATH: "$CRAFT_STAGE/qt;$CRAFT_STAGE/usr/local/lib;$CMAKE_FIND_ROOT_PATH"
    #   - PATH: "$CRAFT_STAGE/qt/bin:$PATH"
    override-stage: |
      cd $CRAFT_PART_INSTALL/opt/RabbitRemoteControl/bin
      # cp $SNAPCRAFT_PART_SRC/snap/local/start.sh .
      # See: https://snapcraft.io/docs/desktop-menu-support#heading--desktop-key
      sed -i 's|Icon=io\.github\.KangLin\.RabbitRemoteControl|Icon=/opt/RabbitRemoteControl/share/icons/hicolor/scalable/apps/io\.github\.KangLin\.RabbitRemoteControl\.svg|' $CRAFT_PART_INSTALL/opt/RabbitRemoteControl/share/applications/io.github.KangLin.RabbitRemoteControl.desktop
      sed -i 's|Path=/opt/RabbitRemoteControl/bin|Path=\$\{SNAP\}/opt/RabbitRemoteControl/bin|' $CRAFT_PART_INSTALL/opt/RabbitRemoteControl/share/applications/io.github.KangLin.RabbitRemoteControl.desktop
      # cat > "qt.conf" << EOF
      # [Paths]
      # Prefix=../../..
      # Libraries=../../../qt/lib
      # Plugins=../../../qt/plugins
      # Translations=../../../qt/translations
      # EOF
      snapcraftctl stage
    prime:
      - -usr/bin/cmark
      - -opt/RabbitRemoteControl/bin/cmark
      - -opt/RabbitRemoteControl/include
      - -opt/RabbitRemoteControl/lib/cmake
      - -opt/RabbitRemoteControl/lib/pkgconfig
      - -opt/RabbitRemoteControl/lib/*.a

apps:
 rabbitremotecontrol:
   #command: opt/RabbitRemoteControl/bin/start.sh
   command: opt/RabbitRemoteControl/bin/RabbitRemoteControlApp
   # See: https://snapcraft.io/docs/desktop-menu-support#heading--desktop-key
   desktop: opt/RabbitRemoteControl/share/applications/io.github.KangLin.RabbitRemoteControl.desktop
   environment:
      LD_LIBRARY_PATH: ${SNAP}/usr/local/lib:${SNAP}/opt/RabbitRemoteControl/lib/:${LD_LIBRARY_PATH}
      PATH: $SNAP/opt/RabbitRemoteControl/bin:$PATH
   # List extensions, run `snapcraft extensions`
   extensions:
     - kde-neon-6
   # See: https://snapcraft.io/docs/supported-interfaces
   plugs:
     - network
     - network-status
     - network-control
     - network-bind
     - network-manager
     - opengl
     - cups-control
     - serial-port
     - alsa
     - audio-playback
     - audio-record
     - avahi-observe
     - browser-support
     - home
     - media-hub
     - mount-observe
     - optical-drive
     - password-manager-service
     - process-control
     - raw-usb
     - removable-media
     - screen-inhibit-control
     - ssh-keys
     - ssh-public-keys
