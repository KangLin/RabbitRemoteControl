#TODO: Change version
version: 'v0.0.4.{build}'

cache:
  #- other_source

environment:
  STOREPASS:
    secure: l9BZEU39F1a4vSkhwl0CHR+yh6CD1c7byGzMv+1NUa4=
  QT_USER:
    secure: EoBPaPuJ6u9UDYpQWjKhUg==
  QT_PASSWORD:
    secure: ejAYGgB+3sBispRxUSr0xw==

  matrix:
  ##### msvc 2015 ########   
  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    GENERATORS: "Visual Studio 15 2017"
    TOOLCHAIN_VERSION: 15
    QT_ROOT: C:\Qt\5.12\msvc2017
    BUILD_ARCH: x86

  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
    GENERATORS: "Visual Studio 14 2015"
    TOOLCHAIN_VERSION: 14
    QT_ROOT: C:\Qt\5.6\msvc2015
    BUILD_ARCH: x86

#  - GENERATORS: "Visual Studio 14 2015 Win64"
#    TOOLCHAIN_VERSION: 14
#    QT_ROOT: C:\Qt\5.6\msvc2015_64
#    BUILD_ARCH: x64

matrix:
  fast_finish: false

init:
  - set varch=%BUILD_ARCH%
  - if "%BUILD_ARCH%" == "x64" set varch=amd64
  - if %TOOLCHAIN_VERSION% LSS 15 (call "C:\Program Files (x86)\Microsoft Visual Studio %TOOLCHAIN_VERSION%.0\VC\vcvarsall.bat" %varch%) else (call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvarsall.bat" %varch%)  
  - echo NUMBER_OF_PROCESSORS=%NUMBER_OF_PROCESSORS%
  - echo PROCESSOR_IDENTIFIER=%PROCESSOR_IDENTIFIER%
  - if NOT "%QT_ROOT%" == "NO" for /f "delims=" %%i in ('%QT_ROOT%/bin/qmake -query QT_VERSION') do (set QT_VERSION=%%i)
  - echo QT_ROOT=%QT_ROOT%
  - echo QT_VERSION=%QT_VERSION%
  - del C:\msys64\usr\bin\link.exe

install:
  - git submodule update --init --recursive

before_build:
  - cd %APPVEYOR_BUILD_FOLDER%/..
  - mkdir other_source
  - set OTHER_SOURCE=%APPVEYOR_BUILD_FOLDER%/../other_source
  - cd %OTHER_SOURCE%
  - mkdir install_dir
  - set INSTALL_DIR=%OTHER_SOURCE%/install_dir

  - cd %OTHER_SOURCE%
  - git clone https://github.com/KangLin/vcpkg.git
  - cd vcpkg
  - set VCPKG_DIR=%CD%
  - bootstrap-vcpkg.bat
  - vcpkg --triplet=%BUILD_ARCH%-windows install openssl freerdp libssh

  - cd %OTHER_SOURCE%
  - git clone https://github.com/KangLin/libvncserver.git
  - cd libvncserver
  - call cmake -E make_directory build
  - cd build
  - cmake .. -DCMAKE_BUILD_TYPE=Release -DWITH_OPENSSL=ON -DWITH_GCRYPT=OFF -DCMAKE_INSTALL_PREFIX=%INSTALL_DIR% -DCMAKE_TOOLCHAIN_FILE=%VCPKG_DIR%/scripts/buildsystems/vcpkg.cmake
  - cmake --build . --config Release
  - cmake --build . --config Release --target install

  - cd %OTHER_SOURCE%
  - git clone https://github.com/KangLin/RabbitCommon.git
  - set RabbitCommon_DIR=%CD%/RabbitCommon

build_script:
  - cd %APPVEYOR_BUILD_FOLDER%
  - mkdir build
  - cd build
  - cmake .. -DQt5_DIR=%QT_ROOT%/lib/cmake/Qt5 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=%cd%/install -DCMAKE_PREFIX_PATH=%INSTALL_DIR% -DCMAKE_TOOLCHAIN_FILE=%VCPKG_DIR%/scripts/buildsystems/vcpkg.cmake
  - cmake --build . --config Release
  - cmake --build . --config Release --target install-runtime
  - call "C:/Program Files (x86)/NSIS/makensis.exe" Install.nsi
  - call "install/bin/RabbitRemoteControlApp.exe" -f "update_windows.xml" --pf RabbitRemoteControl-Setup-v0.0.4.exe -m "v0.0.4"

artifacts:
  - path: build\RabbitRemoteControl-Setup-*.exe
  
  - path: build\update_windows.xml
  
  - path: build\install\
    name: RabbitRemoteControl_v0.0.4
    type: zip

test: off

#See: https://www.appveyor.com/docs/deployment/github/
deploy:
  #provider: FTP 
  #protocol: sftp 
  #host: frs.sourceforge.net 
  #username: kl222,rabbitim
  #密码用这个加密 https://ci.appveyor.com/tools/encrypt
  #password:
  #  secure: 2WEtOQrdty3V3g0aEVvS3Q==
  #folder: pfs  #link pfs to /home/frs/project/r/ra/rabbitim
  #draft: false
  #active_mode: false
  #on:
    #branch: master

  - provider: GitHub
    #token : https://github.com/settings/tokens password encrypt: https://ci.appveyor.com/tools/encrypt
    auth_token:
      secure: 9do9yUjK8IrlU7jqUHUSPkTDADxzqBSa2GxJ0b0mqo9U2gaAkDFgsiDTvjPgCcnV
    #artifact:
    #draft: true
    #prerelease: true
    force_update: false
    on:
      TOOLCHAIN_VERSION: 15
      #QT_VERSION: 5.6.3
      BUILD_ARCH: x86
      appveyor_repo_tag: true        # deploy on tag push only
