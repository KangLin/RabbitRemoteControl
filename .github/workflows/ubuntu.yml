name: ubuntu

on:
  workflow_call:
    outputs:
      name:
        description: "The artifact name"
        value: ${{ jobs.build_ubuntu.outputs.name }}

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

jobs:
  build_ubuntu:
    strategy:
      matrix:
        BUILD_TYPE: [Release, Debug]

    runs-on: ubuntu-latest

    env:
      BUILD_TYPE:  ${{matrix.BUILD_TYPE}}
      SOURCE_DIR:  ${{github.workspace}}/.cache/source
      TOOSL_DIR:   ${{github.workspace}}/.cache/tools
      INSTALL_DIR: ${{github.workspace}}/.cache/install_ubuntu_${{matrix.BUILD_TYPE}}
      RabbitRemoteControl_VERSION: 0.0.27
      artifact_name: build_ubuntu

    # Map the job outputs to step outputs
    outputs:
      name: ${{ env.artifact_name }}

    steps:
      - name: core dump infomations
        if: false
        run: |
          echo "# ulimit -a"
          ulimit -a
          echo "# cat /proc/sys/kernel/core_pattern"
          cat /proc/sys/kernel/core_pattern
          echo "# ulimit -c unlimited"
          ulimit -c unlimited
          echo "# sudo sysctl -w kernel.core_pattern=core"
          sudo sysctl -w kernel.core_pattern=${{github.workspace}}/core
          echo "# ulimit -a"
          ulimit -a
          echo "# cat /proc/sys/kernel/core_pattern"
          cat /proc/sys/kernel/core_pattern

#        See: https://www.cnblogs.com/cong-wang/p/15026524.html
#        Naming of core dump files
#               By default, a core dump file is named core, but the /proc/sys/kernel/core_pattern file (since  Linux  2.6  and
#               2.4.21)  can  be  set  to  define a template that is used to name core dump files.  The template can contain %
#               specifiers which are substituted by the following values when a core file is created:
#
#                   %%  a single % character
#                   %c  core file size soft resource limit of crashing process (since Linux 2.6.24)
#                   %d  dump modeâ€”same as value returned by prctl(2) PR_GET_DUMPABLE (since Linux 3.7)
#                   %e  executable filename (without path prefix)
#                   %E  pathname of executable, with slashes ('/') replaced by exclamation marks ('!') (since Linux 3.0).
#                   %g  (numeric) real GID of dumped process
#                   %h  hostname (same as nodename returned by uname(2))
#                   %i  TID of thread that triggered core dump, as seen in the PID  namespace  in  which  the  thread  resides
#                       (since Linux 3.18)
#                   %I  TID of thread that triggered core dump, as seen in the initial PID namespace (since Linux 3.18)
#                   %p  PID of dumped process, as seen in the PID namespace in which the process resides
#                   %P  PID of dumped process, as seen in the initial PID namespace (since Linux 3.12)
#                   %s  number of signal causing dump
#                   %t  time of dump, expressed as seconds since the Epoch, 1970-01-01 00:00:00 +0000 (UTC)
#                   %u  (numeric) real UID of dumped process

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Make directories
        run: |
          cmake -E make_directory ${{env.SOURCE_DIR}}
          cmake -E make_directory ${{env.TOOSL_DIR}}
          cmake -E make_directory ${{env.INSTALL_DIR}}
          cmake -E make_directory ${{github.workspace}}/build

      - name: git clone RabbitCommon
        working-directory: ${{env.SOURCE_DIR}}
        run: |
            git clone https://github.com/KangLin/RabbitCommon.git

      - name: Install apt packages
        run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt install -y -q cmake build-essential xvfb xpra \
              libglu1-mesa-dev libpulse-mainloop-glib0 \
              cmake debhelper fakeroot graphviz \
              qt6-tools-dev qt6-tools-dev-tools \
              qt6-base-dev qt6-base-dev-tools qt6-qpa-plugins \
              libqt6svg6-dev qt6-l10n-tools qt6-translations-l10n \
              qt6-scxml-dev qt6-multimedia-dev libqt6serialport6-dev \
              qt6-webengine-dev qt6-webengine-dev-tools \
              libxkbcommon-dev libxkbcommon-x11-dev xorg-dev libx11-xcb-dev \
              libx11-dev libxfixes-dev libxcb-randr0-dev libxcb-shm0-dev \
              libxcb-xinerama0-dev libxcb-composite0-dev libxcomposite-dev \
              libxinerama-dev libxcb1-dev libx11-xcb-dev libxcb-xfixes0-dev \
              libpixman-1-dev libpam0g-dev libutf8proc-dev \
              libfuse3-dev libusb-1.0-0-dev \
              libvncserver-dev libssh-dev libtelnet-dev freerdp2-dev

      - name: Cache installed
        uses: actions/cache@v3
        id: cache-installed
        with:
          path: |
            ${{env.INSTALL_DIR}}
          key: cache-installed-ubuntu

      - name: build FreeRDP
        if: false
        working-directory: ${{env.SOURCE_DIR}}
        run: |
          if [ ! -d ${{env.INSTALL_DIR}}/lib/cmake/FreeRDP3 ]; then
            git clone https://github.com/FreeRDP/FreeRDP.git
            # git clone https://github.com/KangLin/FreeRDP.git
            cd FreeRDP
            git checkout -b 6abd9165e6a99549d413f0b2ad18c3a7e150a426 6abd9165e6a99549d413f0b2ad18c3a7e150a426
            git submodule update --init --recursive
            cmake -E make_directory build
            cd build
            cmake .. \
                -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} \
                -DCMAKE_INSTALL_PREFIX="${{env.INSTALL_DIR}}" \
                -DWITH_SERVER=ON \
                -DWITH_CLIENT_SDL=OFF \
                -DWITH_KRB5=OFF \
                -DWITH_MANPAGES=OFF
            cmake --build . --config ${{matrix.BUILD_TYPE}}
            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install/strip
          fi

      - name: build RabbitVNC
        working-directory: ${{env.SOURCE_DIR}}
        run: |
          if [ ! -d ${{env.INSTALL_DIR}}/lib/cmake/RabbitVNC ]; then
            git clone https://github.com/KangLin/RabbitVNC.git 
            cd ${{env.SOURCE_DIR}}/RabbitVNC
            cmake -E make_directory build
            cd build
            cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.BUILD_TYPE }} \
                -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} \
                -DBUILD_TESTS=OFF -DBUILD_VIEWER=OFF
            cmake --build . --config ${{ matrix.BUILD_TYPE }}
            cmake --build . --config ${{ matrix.BUILD_TYPE }} --target install/strip
          fi

      - name: build tigervnc
        working-directory: ${{env.SOURCE_DIR}}
        run: |
          if [ ! -d ${{env.INSTALL_DIR}}/lib/cmake/tigervnc ]; then
            git clone https://github.com/KangLin/tigervnc.git 
            cd ${{env.SOURCE_DIR}}/tigervnc
            cmake -E make_directory build
            cd build
            cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.BUILD_TYPE }} \
                -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} \
                -DBUILD_TESTS=OFF -DBUILD_VIEWER=OFF
            cmake --build . --config ${{ matrix.BUILD_TYPE }}
            cmake --build . --config ${{ matrix.BUILD_TYPE }} --target install/strip
          fi

      - name: build libdatachannel
        working-directory: ${{env.SOURCE_DIR}}
        run: |
          if [ ! -d ${{env.INSTALL_DIR}}/lib/cmake/LibDataChannel ]; then
            git clone -b v0.17.8 https://github.com/paullouisageneau/libdatachannel.git
            cd libdatachannel
            git submodule update --init --recursive
            cmake -E make_directory build
            cd build
            cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.BUILD_TYPE }} -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }}
            cmake --build . --config ${{ matrix.BUILD_TYPE }}
            cmake --build . --config ${{ matrix.BUILD_TYPE }} --target install/strip
          fi

      - name: build QtService
        working-directory: ${{env.SOURCE_DIR}}
        run: |
          if [ ! -d ${{env.INSTALL_DIR}}/lib/cmake/QtService ]; then
            git clone https://github.com/KangLin/qt-solutions.git
            cd qt-solutions/qtservice
            git submodule update --init --recursive
            cmake -E make_directory build
            cd build
            export Qt6_DIR=/usr/lib/`uname-a`-linux-gnu/cmake/Qt6
            cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.BUILD_TYPE }} \
                -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }}
            cmake --build . --config ${{ matrix.BUILD_TYPE }}
            cmake --build . --config ${{ matrix.BUILD_TYPE }} --target install/strip
          fi

      - name: build_debpackage.sh
        working-directory: ${{github.workspace}}
        env:
          RabbitCommon_DIR: ${{env.SOURCE_DIR}}/RabbitCommon
          RabbitVNC_DIR: ${{ env.INSTALL_DIR }}/lib/cmake/RabbitVNC
          LibDataChannel_DIR: ${{ env.INSTALL_DIR }}/lib/cmake/LibDataChannel
          QtService_DIR: ${{ env.INSTALL_DIR }}/lib/cmake/QtService
          FreeRDP_DIR: ${{ env.INSTALL_DIR }}/lib/cmake/FreeRDP3
          WinPR_DIR: ${{ env.INSTALL_DIR }}/lib/cmake/WinPR3
          FreeRDP_Client_DIR: ${{env.INSTALL_DIR}}/lib/cmake/FreeRDP-Client3
          FreeRDP_Shadow_DIR: ${{env.INSTALL_DIR}}/lib/cmake/FreeRDP-Shadow3
          FreeRDP_Server_DIR: ${{env.INSTALL_DIR}}/lib/cmake/FreeRDP-Server3
        run: |
          if [ ${{matrix.BUILD_TYPE}} == 'Release' ]; then
              export BUILD_VIEWER_TERMINAL=OFF
          else
              export tigervnc_DIR=${{env.INSTALL_DIR}}/lib/cmake/tigervnc
          fi
          export Qt6_DIR=/usr/lib/`uname-a`-linux-gnu/cmake/Qt6
          ./build_debpackage.sh
          cp ../rabbitremotecontrol_${{env.RabbitRemoteControl_VERSION}}_amd64.deb rabbitremotecontrol_${{env.RabbitRemoteControl_VERSION}}_amd64.deb
          md5sum rabbitremotecontrol_${{env.RabbitRemoteControl_VERSION}}_amd64.deb > rabbitremotecontrol_${{env.RabbitRemoteControl_VERSION}}_amd64.deb.md5sum

      - name: update xml file
        if: ${{ matrix.BUILD_TYPE == 'Release'}}
        working-directory: ${{github.workspace}}
        #continue-on-error: true
        run: |
          #sudo apt update -y -qq
          #sudo apt-get install -y -qq xvfb xpra
          sudo Xvfb :99 -ac &
          export DISPLAY=:99.0
          echo "Install rabbit remote control ......"
          sudo apt install ./rabbitremotecontrol_${{env.RabbitRemoteControl_VERSION}}_amd64.deb
          #echo "ls -l /opt/RabbitRemoteControl/bin/"
          #ls -l /opt/RabbitRemoteControl/bin/
          echo "Update update_linux.xml ......"
          export QT_XCB_GL_INTEGRATION=none
          MD5SUM=`cat rabbitremotecontrol_${{env.RabbitRemoteControl_VERSION}}_amd64.deb.md5sum|awk '{print $1}'`
          echo "MD5SUM rabbitremotecontrol_${{env.RabbitRemoteControl_VERSION}}_amd64.deb: ${MD5SUM}"
          #ulimit -c unlimited
          #echo "# sudo sysctl -w kernel.core_pattern=core"
          #sudo sysctl -w kernel.core_pattern=${{github.workspace}}/core
          /opt/RabbitRemoteControl/bin/RabbitRemoteControl.sh \
            -f "`pwd`/update_linux.xml" \
            -u "https://github.com/KangLin/RabbitRemoteControl/releases/download/${{env.RabbitRemoteControl_VERSION}}/rabbitremotecontrol_${{env.RabbitRemoteControl_VERSION}}_amd64.deb;https://sourceforge.net/projects/rabbitremotecontrol/files/${{env.RabbitRemoteControl_VERSION}}/rabbitremotecontrol_${{env.RabbitRemoteControl_VERSION}}_amd64.deb" \
            --md5 "${MD5SUM}" \
            -m "v${{env.RabbitRemoteControl_VERSION}}"

      - name: dump core
        if: false
        working-directory: ${{github.workspace}}
        run: |
          gdb /opt/RabbitRemoteControl/bin/RabbitRemoteControlApp core

      - name: Update artifact
        if: ${{ matrix.BUILD_TYPE == 'Release' }}
        uses: actions/upload-artifact@v3
        with:
            name: ${{ env.artifact_name }}
            path: |
              ${{github.workspace}}/rabbitremotecontrol_*.deb
              ${{github.workspace}}/update_linux.xml

#    - name: Upload To Github Release
#      if: ${{ matrix.BUILD_TYPE == 'Release' && startsWith(github.ref, 'refs/tags/') }}
#      uses: softprops/action-gh-release@v1
#      env:
#        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
#      with:
#        prerelease: true
#        body: |
#          [:cn: ä¿®æ”¹æ—¥å¿—](ChangeLog_zh_CN.md) [:cn: è¯´æ˜Ž](README_zh_CN.md)
#          [:us: Change log](ChangeLog.md) [:us: README](README.md)
#        files: |
#            ${{github.workspace}}/update_linux.xml
#            ${{github.workspace}}/rabbitremotecontrol_*.deb
#            ${{github.workspace}}/rabbitremotecontrol_${{env.RabbitRemoteControl_VERSION}}_amd64.deb.md5sum

#- name: Release
#  uses: fnkr/github-action-ghr@v1
#  if: startsWith(github.ref, 'refs/tags/')
#  env:
#    GHR_COMPRESS: xz
#    GHR_PATH: ${{github.workspace}}/rabbitremotecontrol_*.deb
#    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#    - name: Upload To Github Release
#      # You may pin to the exact commit or the version.
#      # uses: xresloader/upload-to-github-release@3ad14478ee4fb9bd65e84c6d496a7d6862892f43
#      uses: xresloader/upload-to-github-release@v1.3.2
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        # The files or file patterns to upload. You can upload multiple files by split them by semicolon. You can use the glob pattern to find the files.
#        file: ${{github.workspace}}/rabbitremotecontrol_*.deb;${{github.workspace}}/update_linux.xml # default is 
#        # The files or file patterns to delete before uploading new files. You can delete multiple files by split them by semicolon. You can use the glob pattern to find the files.
#        #delete_file: # optional, default is 
#        # If you need to overwrite existing files, add overwrite: true to the with.
#        overwrite: true # optional, default is false
#        # The resultant deployment is a draft Release that only repository collaborators can see. This gives you an opportunity to examine and edit the draft release.
#        draft: true # optional, default is true
#        # The resultant deployment is a Prerelease. This gives you an opportunity to examine and edit the prerelease.
#        prerelease: true # optional, default is false
#        # With tags: true, your Releases deployment will trigger if and only if the build is a tagged build.
#        tags: true # optional, default is false
#        # Only work on these branches(splitted by semicolon), set to nothing to accept all branches.
#        branches: master # optional, default is 
#        # With verbose: true, be verbose.
#        verbose: true # optional, default is false
#        # Set custom tag name.
#        #tag_name: 'v${{env.RabbitRemoteControl_VERSION}}'
#        # If try to update latest release.
#        #update_latest_release: true # optional, default is false
#      if: ${{ matrix.BUILD_TYPE == 'Release' && startsWith(github.ref, 'refs/tags/') }} 
