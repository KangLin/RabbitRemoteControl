name: msvc

on: [push]

jobs:
  use_install_qt:
    name: ${{matrix.os}}-vc-${{matrix.VCPKG_PLATFORM_TOOLSET}}-${{matrix.triplet}}-qt${{matrix.qt_version}}-${{matrix.BUILD_TYPE}}

    strategy:
      matrix:
        BUILD_TYPE: [Release, Debug]
        os: [windows-latest]
        CMAKE_GENERATOR: [Visual Studio 17 2022]
        #CMAKE_GENERATOR_PLATFORM: [x64, Win32]
        #VCPKG_PLATFORM_TOOLSET: [v142, v141, v140]
        qt_version: [6.2.4, 5.15.2, 5.12.12]
        include:
          - triplet: x64-windows
            VCPKG_PLATFORM_TOOLSET: v142
            qt_version: 6.2.4
            qt_arch: win64_msvc2019_64
            CMAKE_GENERATOR_PLATFORM: x64
            qt_modules: 'qtwebengine qtscxml qtmultimedia qtwebview qtimageformats'

          - triplet: x64-windows
            VCPKG_PLATFORM_TOOLSET: v142
            qt_version: 5.15.2
            qt_arch: win64_msvc2019_64
            CMAKE_GENERATOR_PLATFORM: x64
            qt_modules: 'qtwebengine'

          - triplet: x86-windows
            VCPKG_PLATFORM_TOOLSET: v141
            qt_version: 5.12.12
            qt_arch: win32_msvc2017
            CMAKE_GENERATOR_PLATFORM: Win32
            qt_modules: 'qtwebengine'

    runs-on: ${{ matrix.os }}

    env:
      SOURCE_DIR:  ${{github.workspace}}\.cache\source
      TOOSL_DIR:   ${{github.workspace}}\.cache\tools
      INSTALL_DIR: ${{github.workspace}}\.cache\install_msvc_${{matrix.triplet}}_${{matrix.BUILD_TYPE}}
      CMAKE_GENERATOR: ${{matrix.CMAKE_GENERATOR}}
      VCPKG_PLATFORM_TOOLSET: ${{matrix.VCPKG_PLATFORM_TOOLSET}}
      CMAKE_GENERATOR_PLATFORM: ${{matrix.CMAKE_GENERATOR_PLATFORM}}
      RabbitRemoteControl_VERSION: v0.0.25
      VCPKGGITCOMMITID: 94ce0dab56f4d8ba6bd631ba59ed682b02d45c46
      VCPKG_OVERLAY_PORTS: ${{github.workspace}}\vcpkg\ports
      qt_modules: '${{matrix.qt_modules}}'
      VCINSTALLDIR: C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC

    defaults:
      run:
        shell: cmd

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: make directory
      run: |
        cmake -E make_directory ${{env.SOURCE_DIR}}
        cmake -E make_directory ${{env.TOOSL_DIR}}
        cmake -E make_directory ${{env.INSTALL_DIR}}

    - name: Cache installed
      uses: actions/cache@v2
      id: cache-installed
      with:
        path: |
          ${{env.INSTALL_DIR}}
        key: RabbitRemoteControl_msvc_cache-installed-${{matrix.os}}-vc${{matrix.VCPKG_PLATFORM_TOOLSET}}-${{matrix.triplet}}-qt${{matrix.qt_version}}-${{matrix.BUILD_TYPE}}-${{env.VCPKGGITCOMMITID}}_2022_10_28

    - name: run-vcpkg
      uses: lukka/run-vcpkg@v7
      with:
        vcpkgGitCommitId: ${{env.VCPKGGITCOMMITID}}
        vcpkgDirectory: ${{runner.workspace}}/vcpkg/
        # Since the cache must be invalidated when content of the vcpkg.json file changes, let's
        # compute its hash and append this to the computed cache's key.
        appendedCacheKey: cache-vcpkg-msvc-${{matrix.os}}-vc${{matrix.VCPKG_PLATFORM_TOOLSET}}-${{matrix.triplet}}-qt${{matrix.qt_version}}-${{matrix.BUILD_TYPE}}-${{env.VCPKGGITCOMMITID}}
        vcpkgTriplet: '${{matrix.triplet}}'
        vcpkgArguments: 'zlib openssl libssh libpng pixman libjpeg-turbo libdatachannel' # freerdp'

#    - name: build libdatachannel
#      working-directory: ${{env.SOURCE_DIR}}
#      run: |
#        IF NOT EXIST ${{env.INSTALL_DIR}}\lib\cmake\LibDataChannel (
#          git clone -b v0.15.5 https://github.com/paullouisageneau/libdatachannel.git
#          cd libdatachannel
#          git submodule update --init --recursive
#          cmake -E make_directory build
#          cd build
#          cmake .. ^
#            -A ${{matrix.CMAKE_GENERATOR_PLATFORM}} ^
#            -T ${{matrix.VCPKG_PLATFORM_TOOLSET}} ^
#            -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
#            -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} ^
#            -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake"
#          cmake --build . --config ${{matrix.BUILD_TYPE}}
#          cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
#        )

    - name: Build FreeRDP
      working-directory: ${{env.SOURCE_DIR}}
      run: |
       IF NOT EXIST ${{env.INSTALL_DIR}}\lib\cmake\FreeRDP3 (
            git clone https://github.com/FreeRDP/FreeRDP.git
            ; git clone https://github.com/KangLin/FreeRDP.git
            cd FreeRDP
            git checkout -b 1da0d63c7850275dd56a59749f51a60cf6eaabd6 1da0d63c7850275dd56a59749f51a60cf6eaabd6
            git submodule update --init --recursive
            cmake -E make_directory build
            cd build
            cmake .. ^
                -A ${{matrix.CMAKE_GENERATOR_PLATFORM}} ^
                -T ${{matrix.VCPKG_PLATFORM_TOOLSET}} ^
                -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
                -DCMAKE_INSTALL_PREFIX="${{env.INSTALL_DIR}}" ^
                -DWITH_SERVER=ON ^
                -DCHANNEL_URBDRC=OFF ^
                -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake"
            cmake --build . --config ${{matrix.BUILD_TYPE}}
            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
        )

    - name: Build libvncserver
      working-directory: ${{env.SOURCE_DIR}}
      run: |
        IF NOT EXIST ${{env.INSTALL_DIR}}\lib\cmake\LibVNCServer (
            git clone https://github.com/KangLin/libvncserver.git
            cd libvncserver
            ;git checkout -b 5deb43e2837e05e5e24bd2bfb458ae6ba930bdaa 5deb43e2837e05e5e24bd2bfb458ae6ba930bdaa
            cmake -E make_directory build
            cd build
            cmake .. ^
                -A ${{matrix.CMAKE_GENERATOR_PLATFORM}} ^
                -T ${{matrix.VCPKG_PLATFORM_TOOLSET}} ^
                -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
                -DWITH_OPENSSL=ON -DWITH_GCRYPT=OFF -DBUILD_TESTS=OFF ^
                -DBUILD_EXAMPLES=OFF ^
                -DCMAKE_INSTALL_PREFIX="${{ env.INSTALL_DIR }}" ^
                -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake"
            cmake --build . --config ${{matrix.BUILD_TYPE}}
            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
        )

    - name: build RabbitVNC
      working-directory: ${{env.SOURCE_DIR}}
      run: |
        IF NOT EXIST ${{env.INSTALL_DIR}}\lib\cmake\RabbitVNC (
            git clone https://github.com/KangLin/RabbitVNC.git 
            cd RabbitVNC
            cmake -E make_directory build
            cd build
            cmake .. ^
                -A ${{matrix.CMAKE_GENERATOR_PLATFORM}} ^
                -T ${{matrix.VCPKG_PLATFORM_TOOLSET}} ^
                -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
                -DCMAKE_INSTALL_PREFIX="${{ env.INSTALL_DIR }}" ^
                -DBUILD_TESTS=OFF -DBUILD_VIEWER=OFF ^
                -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake"
            cmake --build . --config ${{matrix.BUILD_TYPE}}
            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
        )

    - name: build tigervnc
      working-directory: ${{env.SOURCE_DIR}}
      run: |
        IF NOT EXIST ${{env.INSTALL_DIR}}\lib\cmake\tigervnc (
            git clone https://github.com/KangLin/tigervnc.git 
            cd tigervnc
            cmake -E make_directory build
            cd build
            cmake .. ^
                -A ${{matrix.CMAKE_GENERATOR_PLATFORM}} ^
                -T ${{matrix.VCPKG_PLATFORM_TOOLSET}} ^
                -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
                -DCMAKE_INSTALL_PREFIX="${{ env.INSTALL_DIR }}" ^
                -DBUILD_TESTS=OFF -DBUILD_VIEWER=OFF ^
                -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake"
            cmake --build . --config ${{matrix.BUILD_TYPE}}
            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
        )

    - name: git clone RabbitCommon
      working-directory: ${{env.SOURCE_DIR}}
      run: git clone https://github.com/KangLin/RabbitCommon.git

    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v1  # not v2!
      with:
        path: ${{env.TOOSL_DIR}}/qt
        key: rabbitremotecontrol_msvc_qt-vc${{matrix.VCPKG_PLATFORM_TOOLSET}}-${{matrix.triplet}}-qt${{matrix.qt_version}}-${{matrix.BUILD_TYPE}}

    - name: Install Qt
      # You may pin to the exact commit or the version.
      # uses: jurplel/install-qt-action@a962fb91949c8e846a3e4a944d50e7ef5cc3a28a
      uses: jurplel/install-qt-action@v3
      with:
        # Directory to install Qt
        dir: '${{env.TOOSL_DIR}}/qt' # optional
        # Version of Qt to install
        version: '${{matrix.qt_version}}' # optional, default is 5.15.2
        # Host platform
        #host: linux # optional
        # Target platform for build
        #target: desktop # optional, default is desktop
        # Architecture for Windows/Android
        arch: '${{matrix.qt_arch}}' # optional
        # Whether or not to install Qt dependencies on Linux
        #install-deps: true # optional, default is true
        # Additional Qt modules to install
        modules: '${{env.qt_modules}}' # optional
        # Force a Qt mirror in case the default is not working
        #mirror: # optional
        # Whether or not to actually download Qt
        cached: '${{steps.cache-qt.outputs.cache-hit}}' # optional, default is false
        # Whether or not to automatically run setup-python to find a valid python version.
        #setup-python: false # optional, default is true
        # Qt tools to download--specify comma-separated argument lists which are themselves separated by spaces: <tool_name>,<tool_version>,<tool_arch>
        #tools: # optional
        # Whether or not to actually install Qt or just the tools from the tools argument
        #tools-only: false # optional, default is false
        # Version of aqtinstall to use in case of issues
        #aqtversion: # optional, default is ==0.10.0
        # Version of py7zr to use in case of issues
        #py7zrversion: # optional, default is ==0.11.0
        # Any extra arguments to append to the back
        #extra: # optional

    - name: build log4qt
      working-directory: ${{env.SOURCE_DIR}}
      run: |
        IF NOT EXIST ${{env.INSTALL_DIR}}\lib\cmake\Log4Qt (
            git clone https://github.com/KangLin/Log4Qt.git
            cd Log4Qt
            cmake -E make_directory build
            cd build
            cmake .. ^
                -A ${{matrix.CMAKE_GENERATOR_PLATFORM}} ^
                -T ${{matrix.VCPKG_PLATFORM_TOOLSET}} ^
                -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
                -DCMAKE_INSTALL_PREFIX=${{env.INSTALL_DIR}} ^
                -DLOG4QT_ENABLE_EXAMPLES=OFF ^
                -DLOG4QT_ENABLE_TESTS=OFF ^
                -DCMAKE_TOOLCHAIN_FILE=${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake
            cmake --build . --config ${{matrix.BUILD_TYPE}}
            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
        )

    - name: build qxmpp
      working-directory: ${{env.SOURCE_DIR}}
      run: |
        IF NOT EXIST ${{env.INSTALL_DIR}}\lib\cmake\qxmpp (
            git clone -b v1.4.0 "https://github.com/qxmpp-project/qxmpp.git"
            cd qxmpp
            cmake -E make_directory build
            cd build
            cmake .. ^
                -A ${{matrix.CMAKE_GENERATOR_PLATFORM}} ^
                -T ${{matrix.VCPKG_PLATFORM_TOOLSET}} ^
                -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
                -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF ^
                -DCMAKE_INSTALL_PREFIX=${{env.INSTALL_DIR}} ^
                -DCMAKE_TOOLCHAIN_FILE=${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake
            cmake --build . --config ${{matrix.BUILD_TYPE}}
            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
        )

    - name: build QtService
      working-directory: ${{env.SOURCE_DIR}}
      run: |
        IF NOT EXIST ${{env.INSTALL_DIR}}\lib\cmake\QtService (
            git clone "https://github.com/KangLin/qt-solutions.git"
            cd qt-solutions/qtservice
            cmake -E make_directory build
            cd build
            cmake .. ^
                -A ${{matrix.CMAKE_GENERATOR_PLATFORM}} ^
                -T ${{matrix.VCPKG_PLATFORM_TOOLSET}} ^
                -DBUILD_EXAMPLES:BOOL=OFF ^
                -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
                -DCMAKE_INSTALL_PREFIX=${{env.INSTALL_DIR}} ^
                -DCMAKE_TOOLCHAIN_FILE=${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake
            cmake --build . --config ${{matrix.BUILD_TYPE}}
            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
        )

    - name: build RabbitRemoteControl
      env:
        RabbitCommon_DIR: ${{env.SOURCE_DIR}}/RabbitCommon
      run: |
        cmake -E make_directory ${{github.workspace}}/build
        cd ${{github.workspace}}/build
        cmake ${{github.workspace}} ^
            -A ${{matrix.CMAKE_GENERATOR_PLATFORM}} ^
            -T ${{matrix.VCPKG_PLATFORM_TOOLSET}} ^
            -DCMARK_SHARED=OFF ^
            -DCMARK_TESTS=OFF ^
            -DCMARK_STATIC=ON ^
            -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
            -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/build/install ^
            -DBUILD_QUIWidget=OFF ^
            -DBUILD_LibVNCServer=OFF ^
            -DBUILD_FREERDP=ON ^
            -DLog4Qt_DIR=${{env.INSTALL_DIR}}/lib/cmake/Log4Qt ^
            -DFreeRDP-Client_DIR=${{env.INSTALL_DIR}}/lib/cmake/FreeRDP-Client3 ^
            -DFreeRDP_DIR=${{env.INSTALL_DIR}}/lib/cmake/FreeRDP3 ^
            -DWinPR_DIR=${{env.INSTALL_DIR}}/lib/cmake/WinPR3 ^
            -DFreeRDP-Server_DIR=${{env.INSTALL_DIR}}/lib/cmake/FreeRDP-Server3 ^
            -DFreeRDP-Shadow_DIR=${{env.INSTALL_DIR}}/lib/cmake/FreeRDP-Shadow3 ^
            -DLibVNCServer_DIR="${{env.INSTALL_DIR}}/lib/cmake/LibVNCServer" ^
            -DRabbitVNC_DIR=${{env.INSTALL_DIR}}/lib/cmake/RabbitVNC ^
            -Dtigervnc_DIR=${{env.INSTALL_DIR}}/lib/cmake/tigervnc ^
            -DQXmpp_DIR=${{env.INSTALL_DIR}}/lib/cmake/qxmpp ^
            -DQtService_DIR=${{env.INSTALL_DIR}}/lib/cmake/QtService ^
            -DCMAKE_TOOLCHAIN_FILE=${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake
        cmake --build . --config ${{matrix.BUILD_TYPE}}
        IF "${{matrix.BUILD_TYPE}}" == "Release" (
            cmake --install . --config ${{matrix.BUILD_TYPE}} --component Runtime --strip
        ) else (
            cmake --install . --config ${{matrix.BUILD_TYPE}} --component Runtime
        )

    - name: Package
      # if: ${{ matrix.BUILD_TYPE == 'Release' }}
      working-directory: ${{github.workspace}}\build
      run: |
        move /Y install\plugins\*crypto*.dll install\bin
        move /Y install\plugins\*ssl*.dll install\bin
        copy /Y ${{env.INSTALL_DIR}}\bin\*.dll install\bin
        copy /Y ${{env.INSTALL_DIR}}\lib\*.dll install\bin
        copy /Y ${{env.RUNVCPKG_VCPKG_ROOT}}\installed\${{env.RUNVCPKG_VCPKG_TRIPLET_OUT}}\bin\*.dll install\bin
        7z a RabbitRemoteControl_windows_${{env.RabbitRemoteControl_VERSION}}.zip .\install\*
        md5sum RabbitRemoteControl_windows_${{env.RabbitRemoteControl_VERSION}}.zip > RabbitRemoteControl_windows_${{env.RabbitRemoteControl_VERSION}}.zip.md5sum
        makensis Install.nsi
        md5sum RabbitRemoteControl_setup_${{env.RabbitRemoteControl_VERSION}}.exe > RabbitRemoteControl_setup_${{env.RabbitRemoteControl_VERSION}}.exe.md5sum
        if "5.12.12" == "${{matrix.qt_version}}" (
            ${{github.workspace}}\build\install\bin\RabbitRemoteControlApp.exe ^
                -f "update_windows.xml" ^
                -u https://github.com/KangLin/RabbitRemoteControl/releases/download/${{env.RabbitRemoteControl_VERSION}}/RabbitRemoteControl_setup_${{env.RabbitRemoteControl_VERSION}}.exe ^
                --pf RabbitRemoteControl_setup_${{env.RabbitRemoteControl_VERSION}}.exe ^
                -m "${{env.RabbitRemoteControl_VERSION}}"
        )

    - name: update 
      uses: actions/upload-artifact@v2
      with:
        name: rabbitremotecontrol_${{matrix.os}}_msvc_qt${{matrix.qt_version}}_${{matrix.BUILD_TYPE}}
        path: |
          ${{github.workspace}}\build\RabbitRemoteControl_setup_${{env.RabbitRemoteControl_VERSION}}.exe
          ${{github.workspace}}\build\update_windows.xml
      #if: ${{ matrix.BUILD_TYPE == 'Release' }}

    - name: Upload To Github Release
      if: ${{ matrix.BUILD_TYPE == 'Release' && '6.2.4' == matrix.qt_version && startsWith(github.ref, 'refs/tags/') }}
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        prerelease: true
        body: |
           [:cn: 修改日志](ChangeLog_zh_CN.md) [:us: Change log](ChangeLog.md)
        files: |
          ${{github.workspace}}\build\RabbitRemoteControl_windows_${{env.RabbitRemoteControl_VERSION}}.zip
          ${{github.workspace}}\build\RabbitRemoteControl_windows_${{env.RabbitRemoteControl_VERSION}}.zip.md5sum
          ${{github.workspace}}\build\RabbitRemoteControl_setup_${{env.RabbitRemoteControl_VERSION}}.exe
          ${{github.workspace}}\build\RabbitRemoteControl_setup_${{env.RabbitRemoteControl_VERSION}}.exe.md5sum
          ${{github.workspace}}\build\update_windows.xml
