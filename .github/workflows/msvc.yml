name: msvc

on:
  workflow_call:
    outputs:
      name:
        description: "The artifact name"
        value: ${{ jobs.build_msvc.outputs.name }}

jobs:
  build_msvc:

    strategy:
      matrix:
        BUILD_TYPE: [Release, Debug]
        qt_version: [6.5.2, 5.15.2, 5.12.12]
        include:
          - qt_version: 6.5.2
            triplet: x64-windows
            VCPKG_PLATFORM_TOOLSET: v142
            qt_arch: win64_msvc2019_64
            CMAKE_GENERATOR_PLATFORM: x64
            qt_modules: qtscxml qtmultimedia qtimageformats qtwebchannel qtwebsockets qtwebview qtpositioning qtserialport

          - qt_version: 5.15.2
            triplet: x64-windows
            VCPKG_PLATFORM_TOOLSET: v142
            qt_arch: win64_msvc2019_64
            CMAKE_GENERATOR_PLATFORM: x64

          - qt_version: 5.12.12
            triplet: x86-windows
            VCPKG_PLATFORM_TOOLSET: v141
            qt_arch: win32_msvc2017
            CMAKE_GENERATOR_PLATFORM: Win32

    runs-on: windows-latest

    env:
      SOURCE_DIR:  ${{github.workspace}}\.cache\source
      TOOSL_DIR:   ${{github.workspace}}\.cache\tools
      INSTALL_DIR: ${{github.workspace}}\.cache\install_msvc_qt${{matrix.qt_version}}_${{matrix.triplet}}_${{matrix.BUILD_TYPE}}
      CMAKE_GENERATOR: "Visual Studio 17 2022"
      VCPKG_PLATFORM_TOOLSET: ${{matrix.VCPKG_PLATFORM_TOOLSET}}
      CMAKE_GENERATOR_PLATFORM: ${{matrix.CMAKE_GENERATOR_PLATFORM}}
      RabbitRemoteControl_VERSION: v0.0.27
      VCPKGGITCOMMITID: 980ec0f49d81f794778386f7bd518b2cc9c092f0
      qt_modules: qtwebengine ${{matrix.qt_modules}}
      artifact_name: build_msvc

    # Map the job outputs to step outputs
    outputs:
      name: ${{ env.artifact_name }}

    defaults:
      run:
        shell: cmd

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Make directories
        run: |
          cmake -E make_directory ${{github.workspace}}/build
          cmake -E make_directory ${{env.SOURCE_DIR}}
          cmake -E make_directory ${{env.TOOSL_DIR}}
          cmake -E make_directory ${{env.INSTALL_DIR}}
          
      - name: Cache installed
        uses: actions/cache@v3
        id: cache-installed
        with:
          path: |
            ${{env.INSTALL_DIR}}
          key: installed-msvc

      - name: run-vcpkg
        uses: lukka/run-vcpkg@v7.4
        with:
          vcpkgGitCommitId: ${{env.VCPKGGITCOMMITID}}
          vcpkgDirectory: ${{runner.workspace}}/vcpkg/
          # Since the cache must be invalidated when content of the vcpkg.json file changes, let's
          # compute its hash and append this to the computed cache's key.
          appendedCacheKey: cache-vcpkg-${{env.VCPKGGITCOMMITID}}
          vcpkgTriplet: '${{matrix.triplet}}'
          vcpkgArguments: 'openssl libssh libpng pixman libjpeg-turbo libdatachannel libusb freerdp'

#    - name: build libdatachannel
#      working-directory: ${{env.SOURCE_DIR}}
#      run: |
#        IF NOT EXIST ${{env.INSTALL_DIR}}\lib\cmake\LibDataChannel (
#          git clone -b v0.15.5 https://github.com/paullouisageneau/libdatachannel.git
#          cd libdatachannel
#          git submodule update --init --recursive
#          cmake -E make_directory build
#          cd build
#          cmake .. ^
#            -A ${{matrix.CMAKE_GENERATOR_PLATFORM}} ^
#            -T ${{matrix.VCPKG_PLATFORM_TOOLSET}} ^
#            -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
#            -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} ^
#            -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake"
#          cmake --build . --config ${{matrix.BUILD_TYPE}}
#          cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
#        )

#      - name: Build FreeRDP
#        working-directory: ${{env.SOURCE_DIR}}
#        run: |
#          IF NOT EXIST ${{env.INSTALL_DIR}}\lib\cmake\FreeRDP3 (
#            git clone https://github.com/FreeRDP/FreeRDP.git
#            ; git clone https://github.com/KangLin/FreeRDP.git
#            cd FreeRDP
#            git checkout -b 04fa5b3033722df4fba45c02056be8e7cb45d7c6 04fa5b3033722df4fba45c02056be8e7cb45d7c6
#            git submodule update --init --recursive
#            cmake -E make_directory build
#            cd build
#            cmake .. ^
#                -A ${{matrix.CMAKE_GENERATOR_PLATFORM}} ^
#                -T ${{matrix.VCPKG_PLATFORM_TOOLSET}} ^
#                -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
#                -DCMAKE_INSTALL_PREFIX="${{env.INSTALL_DIR}}" ^
#                -DWITH_SERVER=ON ^
#                -DWITH_CLIENT_SDL=OFF ^
#                -DWITH_KRB5=OFF ^
#                -DWITH_MANPAGES=OFF ^
#                -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake"
#            cmake --build . --config ${{matrix.BUILD_TYPE}}
#            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
#          )

      - name: Build libvncserver
        working-directory: ${{env.SOURCE_DIR}}
        run: |
          IF NOT EXIST ${{env.INSTALL_DIR}}\lib\cmake\LibVNCServer (
            git clone https://github.com/KangLin/libvncserver.git
            cd libvncserver
            ;git checkout -b 5deb43e2837e05e5e24bd2bfb458ae6ba930bdaa 5deb43e2837e05e5e24bd2bfb458ae6ba930bdaa
            cmake -E make_directory build
            cd build
            cmake .. ^
                -A ${{matrix.CMAKE_GENERATOR_PLATFORM}} ^
                -T ${{matrix.VCPKG_PLATFORM_TOOLSET}} ^
                -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
                -DWITH_OPENSSL=ON -DWITH_GCRYPT=OFF -DBUILD_TESTS=OFF ^
                -DBUILD_EXAMPLES=OFF ^
                -DCMAKE_INSTALL_PREFIX="${{ env.INSTALL_DIR }}" ^
                -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake"
            cmake --build . --config ${{matrix.BUILD_TYPE}}
            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
          )

      - name: build RabbitVNC
        working-directory: ${{env.SOURCE_DIR}}
        run: |
          IF NOT EXIST ${{env.INSTALL_DIR}}\lib\cmake\RabbitVNC (
            git clone https://github.com/KangLin/RabbitVNC.git 
            cd RabbitVNC
            cmake -E make_directory build
            cd build
            cmake .. ^
                -A ${{matrix.CMAKE_GENERATOR_PLATFORM}} ^
                -T ${{matrix.VCPKG_PLATFORM_TOOLSET}} ^
                -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
                -DCMAKE_INSTALL_PREFIX="${{ env.INSTALL_DIR }}" ^
                -DBUILD_TESTS=OFF -DBUILD_VIEWER=OFF ^
                -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake"
            cmake --build . --config ${{matrix.BUILD_TYPE}}
            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
          )

      - name: build tigervnc
        working-directory: ${{env.SOURCE_DIR}}
        run: |
          IF NOT EXIST ${{env.INSTALL_DIR}}\lib\cmake\tigervnc (
            git clone https://github.com/KangLin/tigervnc.git 
            cd tigervnc
            cmake -E make_directory build
            cd build
            cmake .. ^
                -A ${{matrix.CMAKE_GENERATOR_PLATFORM}} ^
                -T ${{matrix.VCPKG_PLATFORM_TOOLSET}} ^
                -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
                -DCMAKE_INSTALL_PREFIX="${{ env.INSTALL_DIR }}" ^
                -DBUILD_TESTS=OFF -DBUILD_VIEWER=OFF ^
                -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake"
            cmake --build . --config ${{matrix.BUILD_TYPE}}
            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
          )

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1  # not v2!
        with:
          path: ${{env.TOOSL_DIR}}/qt
          key: qt_${{matrix.qt_version}}_${{matrix.qt_arch}}

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          dir: '${{env.TOOSL_DIR}}/qt' # optional
          version: '${{matrix.qt_version}}' # optional, default is 5.15.2
          arch: '${{matrix.qt_arch}}' # optional
          modules: '${{env.qt_modules}}' # optional.  see: https://ddalcino.github.io/aqt-list-server/
          cached: '${{steps.cache-qt.outputs.cache-hit}}' # optional, default is false

      - name: build qxmpp
        working-directory: ${{env.SOURCE_DIR}}
        run: |
          IF NOT EXIST ${{env.INSTALL_DIR}}\lib\cmake\qxmpp (
            git clone -b v1.4.0 "https://github.com/qxmpp-project/qxmpp.git"
            cd qxmpp
            cmake -E make_directory build
            cd build
            cmake .. ^
                -A ${{matrix.CMAKE_GENERATOR_PLATFORM}} ^
                -T ${{matrix.VCPKG_PLATFORM_TOOLSET}} ^
                -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
                -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF ^
                -DCMAKE_INSTALL_PREFIX=${{env.INSTALL_DIR}} ^
                -DCMAKE_TOOLCHAIN_FILE=${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake
            cmake --build . --config ${{matrix.BUILD_TYPE}}
            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
          )

      - name: build QtService
        working-directory: ${{env.SOURCE_DIR}}
        run: |
          IF NOT EXIST ${{env.INSTALL_DIR}}\lib\cmake\QtService (
            git clone "https://github.com/KangLin/qt-solutions.git"
            cd qt-solutions/qtservice
            cmake -E make_directory build
            cd build
            cmake .. ^
                -A ${{matrix.CMAKE_GENERATOR_PLATFORM}} ^
                -T ${{matrix.VCPKG_PLATFORM_TOOLSET}} ^
                -DBUILD_EXAMPLES:BOOL=OFF ^
                -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
                -DCMAKE_INSTALL_PREFIX=${{env.INSTALL_DIR}} ^
                -DCMAKE_TOOLCHAIN_FILE=${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake
            cmake --build . --config ${{matrix.BUILD_TYPE}}
            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
          )

      - name: git clone RabbitCommon
        working-directory: ${{env.SOURCE_DIR}}
        run: git clone https://github.com/KangLin/RabbitCommon.git

      - name: Build RabbitRemoteControl
        working-directory: ${{github.workspace}}\build
        env:
          RabbitCommon_DIR: ${{env.SOURCE_DIR}}/RabbitCommon
        run: |
          cmake -E make_directory ${{github.workspace}}/build
          cd ${{github.workspace}}/build
          cmake ${{github.workspace}} ^
            -A ${{matrix.CMAKE_GENERATOR_PLATFORM}} ^
            -T ${{matrix.VCPKG_PLATFORM_TOOLSET}} ^
            -DCMARK_SHARED=OFF ^
            -DCMARK_TESTS=OFF ^
            -DCMARK_STATIC=ON ^
            -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
            -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/build/install ^
            -DCMAKE_TOOLCHAIN_FILE=${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake ^
            -DVCPKG_VERBOSE=ON ^
            -DX_VCPKG_APPLOCAL_DEPS_INSTALL=ON ^
            -DBUILD_QUIWidget=OFF ^
            -DBUILD_LibVNCServer=OFF ^
            -DBUILD_FREERDP=ON ^
            -DLibVNCServer_DIR="${{env.INSTALL_DIR}}/lib/cmake/LibVNCServer" ^
            -DRabbitVNC_DIR=${{env.INSTALL_DIR}}/lib/cmake/RabbitVNC ^
            -Dtigervnc_DIR=${{env.INSTALL_DIR}}/lib/cmake/tigervnc ^
            -DQXmpp_DIR=${{env.INSTALL_DIR}}/lib/cmake/qxmpp ^
            -DQtService_DIR=${{env.INSTALL_DIR}}/lib/cmake/QtService ^
            -DFreeRDP_DIR=${{env.INSTALL_DIR}}/lib/cmake/FreeRDP2 ^
            -DFreeRDP-Client_DIR=${{env.INSTALL_DIR}}/lib/cmake/FreeRDP-Client2 ^
            -DWinPR_DIR=${{env.INSTALL_DIR}}/lib/cmake/WinPR2 ^
            -DFreeRDP-Shadow_DIR=${{env.INSTALL_DIR}}/lib/cmake/FreeRDP-Shadow2 ^
            -DFreeRDP-Server_DIR=${{env.INSTALL_DIR}}/lib/cmake/FreeRDP-Server2
          cmake --build . --config ${{matrix.BUILD_TYPE}}
          IF "${{matrix.BUILD_TYPE}}" == "Release" (
            cmake --install . --config ${{matrix.BUILD_TYPE}} --strip
          ) else (
            cmake --install . --config ${{matrix.BUILD_TYPE}}
          )

      - name: Package
        if: ${{ matrix.BUILD_TYPE == 'Release' }}
        working-directory: ${{github.workspace}}\build
        run: |
          move /Y install\plugins\*crypto*.dll install\bin
          move /Y install\plugins\*ssl*.dll install\bin
          copy /Y ${{env.INSTALL_DIR}}\bin\*.dll install\bin
          copy /Y ${{env.INSTALL_DIR}}\lib\*.dll install\bin
          copy /Y ${{env.RUNVCPKG_VCPKG_ROOT}}\installed\${{env.RUNVCPKG_VCPKG_TRIPLET_OUT}}\bin\*.dll install\bin
          7z a RabbitRemoteControl_windows_${{env.RabbitRemoteControl_VERSION}}.zip .\install\*
          md5sum RabbitRemoteControl_windows_${{env.RabbitRemoteControl_VERSION}}.zip > RabbitRemoteControl_windows_${{env.RabbitRemoteControl_VERSION}}.zip.md5sum
          makensis Install.nsi
          cp RabbitRemoteControl_Setup_${{env.RabbitRemoteControl_VERSION}}.exe RabbitRemoteControl_${{env.RabbitRemoteControl_VERSION}}_qt_${{matrix.qt_version}}_Setup.exe
          md5sum RabbitRemoteControl_${{env.RabbitRemoteControl_VERSION}}_qt_${{matrix.qt_version}}_Setup.exe > RabbitRemoteControl_${{env.RabbitRemoteControl_VERSION}}_qt_${{matrix.qt_version}}_Setup.exe.md5sum
          ${{github.workspace}}\build\install\bin\RabbitRemoteControlApp.exe ^
                -f "update_windows.xml" ^
                -u https://github.com/KangLin/RabbitRemoteControl/releases/download/${{env.RabbitRemoteControl_VERSION}}/RabbitRemoteControl_${{env.RabbitRemoteControl_VERSION}}_qt_${{matrix.qt_version}}_Setup.exe;https://sourceforge.net/projects/rabbitremotecontrol/files/${{env.RabbitRemoteControl_VERSION}}/RabbitRemoteControl_${{env.RabbitRemoteControl_VERSION}}_qt_${{matrix.qt_version}}_Setup.exe ^
                --pf RabbitRemoteControl_${{env.RabbitRemoteControl_VERSION}}_qt_${{matrix.qt_version}}_Setup.exe ^
                -m "${{env.RabbitRemoteControl_VERSION}}"

      - name: Update artifact
        if: ${{ matrix.BUILD_TYPE == 'Release' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.artifact_name }}
          path: |
            ${{github.workspace}}\build\RabbitRemoteControl_${{env.RabbitRemoteControl_VERSION}}_qt_${{matrix.qt_version}}_Setup.exe

      - name: Update artifact update_windows.xml
        if: ${{ matrix.BUILD_TYPE == 'Release' && '6.5.2' == matrix.qt_version }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.artifact_name }}
          path: |
            ${{github.workspace}}\build\update_windows.xml

#    - name: Upload To Github Release
#      if: ${{ matrix.BUILD_TYPE == 'Release' && '5.12.12' == matrix.qt_version && startsWith(github.ref, 'refs/tags/') }}
#      uses: softprops/action-gh-release@v0.1.14
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        prerelease: true
##        body: |
##          [:cn: 修改日志](ChangeLog_zh_CN.md) [:cn: 说明](README_zh_CN.md)
##          [:us: Change log](ChangeLog.md) [:us: README](README.md)
#        files: |
#          ${{github.workspace}}\build\RabbitRemoteControl_windows_${{env.RabbitRemoteControl_VERSION}}.zip
#          ${{github.workspace}}\build\RabbitRemoteControl_windows_${{env.RabbitRemoteControl_VERSION}}.zip.md5sum
#          ${{github.workspace}}\build\RabbitRemoteControl_${{env.RabbitRemoteControl_VERSION}}_qt_${{matrix.qt_version}}_Setup.exe
#          ${{github.workspace}}\build\RabbitRemoteControl_${{env.RabbitRemoteControl_VERSION}}_qt_${{matrix.qt_version}}_Setup.exe.md5sum
#          ${{github.workspace}}\build\update_windows.xml
