name: mingw 

on: [push]

jobs:
  build:
    name: build

    strategy:
      matrix:
        os: [windows-latest]
        # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
        BUILD_TYPE: [Release, Debug]

    defaults:
      run:
        shell: cmd
        
    runs-on: ${{ matrix.os }}
    env:
      BUILD_TYPE:  ${{ matrix.BUILD_TYPE }}
      SOURCE_DIR:  ${{github.workspace}}\.cache\source
      TOOSL_DIR:   ${{github.workspace}}\.cache\tools
      INSTALL_DIR: ${{github.workspace}}\.cache\install_mingw
      RabbitRemoteControl_VERSION: v0.0.25

    steps:
    - uses: actions/checkout@v2
      #with:
        #fetch-depth: 0
            
    - name: pacman
      env:
        PATH: C:\msys64\usr\bin
      run: | 
        C:\msys64\usr\bin\pacman.exe -S --noconfirm mingw-w64-x86_64-cmake ^
            mingw-w64-x86_64-make ^
            mingw-w64-x86_64-nsis ^
            mingw-w64-x86_64-gcc ^
            mingw-w64-x86_64-qt5 ^
            mingw-w64-x86_64-qtwebkit ^
            mingw-w64-x86_64-zlib ^
            mingw-w64-x86_64-libvncserver ^
            mingw-w64-x86_64-cyrus-sasl ^
            mingw-w64-x86_64-pixman ^
            mingw-w64-x86_64-openjpeg ^
            mingw-w64-x86_64-libjpeg-turbo ^
            mingw-w64-x86_64-libpng ^
            mingw-w64-x86_64-yasm ^
            mingw-w64-x86_64-openh264 ^
            mingw-w64-x86_64-qxmpp ^
            mingw-w64-x86_64-freerdp ^
            git base-devel

    - name: make_directory
      run: |
        cmake -E make_directory ${{env.SOURCE_DIR}}
        cmake -E make_directory ${{env.TOOSL_DIR}}
        cmake -E make_directory ${{env.INSTALL_DIR}}
    
    - name: Cache installed
      uses: actions/cache@v2
      id: cache-installed
      with:
        path: |
          ${{env.INSTALL_DIR}}
        key: cache-installed-mingw_2022_12_01
        
    - name: git clone RabbitCommon
      working-directory: ${{env.SOURCE_DIR}}
      run: git clone https://github.com/KangLin/RabbitCommon.git

#    - name: Build FreeRDP
#      working-directory: ${{env.SOURCE_DIR}}
#      env:
#        MSYSTEM: MINGW64
#        PATH: C:\msys64\mingw64\bin;C:\msys64\usr\bin
#      run: |
#       IF NOT EXIST ${{env.INSTALL_DIR}}\lib\cmake\FreeRDP3 (
#            git clone https://github.com/FreeRDP/FreeRDP.git
#            ;git clone https://github.com/KangLin/FreeRDP.git
#            cd FreeRDP
#            ;git checkout -b 2ad14696124b5a7689a323f56859efb329a3d25c 2ad14696124b5a7689a323f56859efb329a3d25c ; 1da0d63c7850275dd56a59749f51a60cf6eaabd6 1da0d63c7850275dd56a59749f51a60cf6eaabd6
#            git submodule update --init --recursive
#            cmake -E make_directory build
#            cd build
#            cmake .. ^
#                -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
#                -DCMAKE_INSTALL_PREFIX="${{env.INSTALL_DIR}}" ^
#                -DWITH_SERVER=ON ^
#                -DCHANNEL_URBDRC=OFF ^
#                -DUSE_UNWIND=OFF
#            cmake --build . --config ${{matrix.BUILD_TYPE}}
#            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
#        )

    - name: build RabbitVNC
      working-directory: ${{env.SOURCE_DIR}}
      env:
        MSYSTEM: MINGW64
        PATH: C:\msys64\mingw64\bin;C:\msys64\usr\bin
      run: |
        IF NOT EXIST ${{env.INSTALL_DIR}}\lib\cmake\RabbitVNC (
            git clone https://github.com/KangLin/RabbitVNC.git 
            cd RabbitVNC
            cmake -E make_directory build
            cd build
            cmake .. -G"MinGW Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
                  -DCMAKE_INSTALL_PREFIX=${{env.INSTALL_DIR}} ^
                  -DBUILD_TESTS=OFF -DBUILD_VIEWER=OFF
            cmake --build . --config ${{matrix.BUILD_TYPE}}
            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
        )
        
    - name: build tigervnc
      working-directory: ${{env.SOURCE_DIR}}
      env:
        MSYSTEM: MINGW64
        PATH: C:\msys64\mingw64\bin;C:\msys64\usr\bin
      run: |
        IF NOT EXIST ${{env.INSTALL_DIR}}\lib\cmake\tigervnc (
            git clone https://github.com/KangLin/tigervnc.git 
            cd tigervnc
            cmake -E make_directory build
            cd build
            cmake .. -G"MinGW Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
                  -DCMAKE_INSTALL_PREFIX=${{env.INSTALL_DIR}} ^
                  -DBUILD_TESTS=OFF -DBUILD_VIEWER=OFF
            cmake --build . --config ${{matrix.BUILD_TYPE}}
            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
        )

    - name: build libdatachannel
      working-directory: ${{env.SOURCE_DIR}}
      env:
        MSYSTEM: MINGW64
        PATH: C:\msys64\mingw64\bin;C:\msys64\usr\bin
      run: |
        IF NOT EXIST ${{env.INSTALL_DIR}}\lib\cmake\LibDataChannel (
            git clone -b v0.15.5 https://github.com/paullouisageneau/libdatachannel.git
            cd libdatachannel
            git submodule update --init --recursive
            cmake -E make_directory build
            cd build
            cmake .. -G"MinGW Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
                -DCMAKE_INSTALL_PREFIX=${{env.INSTALL_DIR}} ^
                -DNO_EXAMPLES=ON -DNO_TESTS=ON -DNO_WEBSOCKET=ON
            cmake --build . --config ${{matrix.BUILD_TYPE}}
            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
        )

    - name: build log4qt
      working-directory: ${{env.SOURCE_DIR}}
      env:
        MSYSTEM: MINGW64
        PATH: C:\msys64\mingw64\bin;C:\msys64\usr\bin
      run: |
        IF NOT EXIST ${{env.INSTALL_DIR}}\lib\cmake\Log4Qt (
            git clone https://github.com/KangLin/Log4Qt.git
            cd Log4Qt
            cmake -E make_directory build
            cd build
            cmake .. -G"MinGW Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
                -DLOG4QT_ENABLE_EXAMPLES=OFF ^
                -DLOG4QT_ENABLE_TESTS=OFF ^
                -DCMAKE_INSTALL_PREFIX=${{env.INSTALL_DIR}}
            cmake --build . --config ${{matrix.BUILD_TYPE}}
            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
        )
        
#    - name: build qxmpp
#      working-directory: ${{env.SOURCE_DIR}}
#      env:
#        MSYSTEM: MINGW64
#        PATH: C:\msys64\mingw64\bin;C:\msys64\usr\bin
#      run: |
#        IF NOT EXIST ${{env.INSTALL_DIR}}\lib\cmake\qxmpp (
#            git clone -b v1.4.0 "https://github.com/qxmpp-project/qxmpp.git"
#            cd qxmpp
#            cmake -E make_directory build
#            cd build
#            cmake .. ^
#                -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
#                -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF ^
#                -DCMAKE_INSTALL_PREFIX=${{env.INSTALL_DIR}}
#            cmake --build . --config ${{matrix.BUILD_TYPE}}
#            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
#        )
        
    - name: build QtService
      working-directory: ${{env.SOURCE_DIR}}
      env:
        MSYSTEM: MINGW64
        PATH: C:\msys64\mingw64\bin;C:\msys64\usr\bin
      run: |
        IF NOT EXIST ${{env.INSTALL_DIR}}/lib/cmake/QtService (
            git clone "https://github.com/KangLin/qt-solutions.git"
            cd qt-solutions/qtservice
            cmake -E make_directory build
            cd build
            cmake .. -G"MinGW Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
                -DCMAKE_INSTALL_PREFIX=${{env.INSTALL_DIR}}
            cmake --build . --config ${{matrix.BUILD_TYPE}}
            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
        )

    - name: build RabbitRemoteControl
      working-directory: ${{github.workspace}}
      env:
        RabbitCommon_DIR: ${{env.SOURCE_DIR}}/RabbitCommon
        #Qt5_Dir: C:\msys64\mingw64
        MSYSTEM: MINGW64
        PATH: C:\msys64\mingw64\bin;C:\msys64\usr\bin
      run: |
        cmake -E make_directory build
        cd build
        cmake .. -G"MinGW Makefiles" ^
            -DCMARK_SHARED=OFF ^
            -DCMARK_TESTS=OFF ^
            -DCMARK_STATIC=ON ^
            -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
            -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/build/install ^
            -DBUILD_FREERDP=ON ^
            -DBUILD_LibVNCServer=OFF ^
            -DLog4Qt_DIR=/lib/cmake/Log4Qt ^
            -Dtigervnc_DIR=${{env.INSTALL_DIR}}/lib/cmake ^
            -Dlibdatachannel_DIR=${{env.INSTALL_DIR}}/share/cmake/libdatachannel ^
            -DQtService_DIR=${{env.INSTALL_DIR}}/lib/cmake/QtService ^
            -DCMAKE_PREFIX_PATH=${{env.INSTALL_DIR}}
        cmake --build . --config ${{ matrix.BUILD_TYPE }}
        cmake --build . --config ${{ matrix.BUILD_TYPE }} --target install

    - name: Package
      working-directory: ${{github.workspace}}/build
      run: |
        move /Y install\plugins\*crypto*.dll install\bin
        move /Y install\plugins\*ssl*.dll install\bin
        copy /Y C:\msys64\mingw64\bin\*.dll install\bin
        copy /Y ${{env.INSTALL_DIR}}\bin\*.dll install\bin
        copy /Y ${{env.INSTALL_DIR}}\lib\*.dll install\bin
        makensis ${{github.workspace}}/build/Install.nsi
        md5sum RabbitRemoteControl_setup_${{env.RabbitRemoteControl_VERSION}}.exe > RabbitRemoteControl_setup_${{env.RabbitRemoteControl_VERSION}}.exe.md5
      #if: ${{ matrix.BUILD_TYPE == 'Release' }}

    - name: update
      uses: actions/upload-artifact@v2
      with:
        name: rabbitremotecontrol_${{ matrix.os }}_mingw_${{matrix.BUILD_TYPE}}
        path: |
          ${{github.workspace}}/build/RabbitRemoteControl_Setup_${{env.RabbitRemoteControl_VERSION}}.exe
      if: ${{ matrix.BUILD_TYPE == 'Release' }}
