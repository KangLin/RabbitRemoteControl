# Author: Kang Lin <kl222@126.com>

name: mingw

on:
  workflow_call:
    outputs:
      name:
        description: "The artifact name"
        value: ${{ jobs.build_mingw.outputs.name }}

jobs:
  build_mingw:

    strategy:
      matrix:
        BUILD_TYPE: [Release, Debug]

    defaults:
      run:
        shell: cmd
        
    # See: [About GitHub-hosted runners](https://docs.github.com/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners)
    # See: [Choosing the runner for a job](https://docs.github.com/actions/writing-workflows/choosing-where-your-workflow-runs/choosing-the-runner-for-a-job)
    # See: https://github.com/actions/runner-images/
    runs-on: windows-2022

    env:
      BUILD_TYPE:  ${{ matrix.BUILD_TYPE }}
      BUILD_DIR:   ${{github.workspace}}/build
      SOURCE_DIR:  ${{github.workspace}}\.cache\source
      TOOLS_DIR:   ${{github.workspace}}\.cache\tools
      INSTALL_DIR: ${{github.workspace}}\.cache\install
      RabbitRemoteControl_VERSION: v0.0.33
      artifact_name: build_mingw

    # Map the job outputs to step outputs
    outputs:
      name: ${{ env.artifact_name }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
            
      - name: pacman
        env:
          PATH: C:\msys64\usr\bin
        run: | 
          C:\msys64\usr\bin\pacman.exe -Syu --noconfirm
          C:\msys64\usr\bin\pacman.exe -S --noconfirm ^
            mingw-w64-x86_64-cmake ^
            mingw-w64-x86_64-make ^
            mingw-w64-x86_64-nsis ^
            mingw-w64-x86_64-gcc ^
            mingw-w64-x86_64-qt6 ^
            mingw-w64-x86_64-zlib ^
            mingw-w64-x86_64-openssl ^
            mingw-w64-x86_64-cmark ^
            mingw-w64-x86_64-libvncserver ^
            mingw-w64-x86_64-cyrus-sasl ^
            mingw-w64-x86_64-pixman ^
            mingw-w64-x86_64-libjpeg-turbo ^
            mingw-w64-x86_64-libpng ^
            mingw-w64-x86_64-yasm ^
            mingw-w64-x86_64-openh264 ^
            mingw-w64-x86_64-qxmpp ^
            mingw-w64-x86_64-freerdp ^
            git base-devel

      - name: make_directory
        run: |
          cmake -E make_directory ${{env.BUILD_DIR}}
          cmake -E make_directory ${{env.SOURCE_DIR}}
          cmake -E make_directory ${{env.TOOLS_DIR}}
          cmake -E make_directory ${{env.INSTALL_DIR}}
    
      - name: Cache installed
        uses: actions/cache@v4
        id: cache-installed
        with:
          path: |
            ${{env.INSTALL_DIR}}
          key: install_mingw_${{matrix.BUILD_TYPE}}
        
      - name: git clone RabbitCommon
        working-directory: ${{env.SOURCE_DIR}}
        run: |
          git clone https://github.com/KangLin/RabbitCommon.git
          

#    - name: Build FreeRDP
#      working-directory: ${{env.SOURCE_DIR}}
#      env:
#        MSYSTEM: MINGW64
#        PATH: C:\msys64\mingw64\bin;C:\msys64\usr\bin
#      run: |
#       IF NOT EXIST ${{env.INSTALL_DIR}}\lib\cmake\FreeRDP3 (
#            git clone https://github.com/FreeRDP/FreeRDP.git
#            ;git clone https://github.com/KangLin/FreeRDP.git
#            cd FreeRDP
#            ;git checkout -b 0b16fcef18c9ec0f5ffb14c3d9357fe8acdf7658 0b16fcef18c9ec0f5ffb14c3d9357fe8acdf7658
#            git submodule update --init --recursive
#            cmake -E make_directory build
#            cd build
#            cmake .. ^
#                -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
#                -DCMAKE_INSTALL_PREFIX="${{env.INSTALL_DIR}}" ^
#                -DWITH_SERVER=ON ^
#                -DCHANNEL_URBDRC=OFF ^
#                -DUSE_UNWIND=OFF
#            cmake --build . --config ${{matrix.BUILD_TYPE}}
#            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
#        )

      - name: build RabbitVNC
        if: false
        working-directory: ${{env.SOURCE_DIR}}
        env:
          MSYSTEM: MINGW64
          PATH: C:\msys64\mingw64\bin;C:\msys64\usr\bin
        run: |
          IF NOT EXIST ${{env.INSTALL_DIR}}\lib\cmake\RabbitVNC (
            git clone --depth=1 https://github.com/KangLin/RabbitVNC.git
            cd RabbitVNC
            cmake -E make_directory build
            cd build
            cmake .. -G"MinGW Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
                  -DCMAKE_INSTALL_PREFIX=${{env.INSTALL_DIR}} ^
                  -DBUILD_TESTS=OFF -DBUILD_VIEWER=OFF
            cmake --build . --config ${{matrix.BUILD_TYPE}}
            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
          )
        
      - name: build tigervnc
        working-directory: ${{env.SOURCE_DIR}}
        if: true
        env:
          MSYSTEM: MINGW64
          PATH: C:\msys64\mingw64\bin;C:\msys64\usr\bin
        run: |
          IF NOT EXIST ${{env.INSTALL_DIR}}\lib\cmake\tigervnc (
            git clone --depth=1 https://github.com/KangLin/tigervnc.git
            cd tigervnc
            cmake -E make_directory build
            cd build
            cmake .. -G"MinGW Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
                  -DCMAKE_INSTALL_PREFIX=${{env.INSTALL_DIR}} ^
                  -DBUILD_TESTS=OFF -DBUILD_VIEWER=OFF ^
                  -DCMAKE_POLICY_VERSION_MINIMUM=3.5
            cmake --build . --config ${{matrix.BUILD_TYPE}}
            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
          )

      - name: build libdatachannel
        if: false
        working-directory: ${{env.SOURCE_DIR}}
        env:
          MSYSTEM: MINGW64
          PATH: C:\msys64\mingw64\bin;C:\msys64\usr\bin
        run: |
          IF NOT EXIST ${{env.INSTALL_DIR}}\lib\cmake\LibDataChannel (
            git clone -b v0.21.1 --depth=1 https://github.com/paullouisageneau/libdatachannel.git
            cd libdatachannel
            git submodule update --init --recursive
            cmake -E make_directory build
            cd build
            cmake .. -G"MinGW Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
                -DCMAKE_INSTALL_PREFIX=${{env.INSTALL_DIR}} ^
                -DNO_EXAMPLES=ON -DNO_TESTS=ON -DNO_WEBSOCKET=ON
            cmake --build . --config ${{matrix.BUILD_TYPE}}
            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
          )
        
      - name: build QtService
        if: false
        working-directory: ${{env.SOURCE_DIR}}
        env:
          MSYSTEM: MINGW64
          PATH: C:\msys64\mingw64\bin;C:\msys64\usr\bin
        run: |
          IF NOT EXIST ${{env.INSTALL_DIR}}/lib/cmake/QtService (
            git clone --depth=1 "https://github.com/KangLin/qt-solutions.git"
            cd qt-solutions/qtservice
            cmake -E make_directory build
            cd build
            cmake .. -G"MinGW Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
                -DCMAKE_INSTALL_PREFIX=${{env.INSTALL_DIR}}
            cmake --build . --config ${{matrix.BUILD_TYPE}}
            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
          )

      - name: build RabbitRemoteControl
        working-directory: ${{env.BUILD_DIR}}
        env:
          RabbitCommon_ROOT: ${{env.SOURCE_DIR}}/RabbitCommon
          MSYSTEM: MINGW64
          PATH: C:\msys64\mingw64\bin;C:\msys64\usr\bin
        run: |
          cmake .. -G"MinGW Makefiles" ^
            -DCMARK_SHARED=OFF ^
            -DCMARK_TESTS=OFF ^
            -DCMARK_STATIC=ON ^
            -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} ^
            -DCMAKE_INSTALL_PREFIX=${{env.BUILD_DIR}}/install ^
            -DBUILD_FREERDP=ON ^
            -DBUILD_LibVNCServer=ON ^
            -DBUILD_RABBITVNC=OFF ^
            -DRabbitVNC_DIR=${{env.INSTALL_DIR}}/lib/cmake/RabbitVNC ^
            -Dtigervnc_DIR=${{env.INSTALL_DIR}}/lib/cmake ^
            -Dlibdatachannel_DIR=${{env.INSTALL_DIR}}/share/cmake/libdatachannel ^
            -DBUILD_SERVICE=OFF ^
            -DQtService_DIR=${{env.INSTALL_DIR}}/lib/cmake/QtService ^
            -DCMAKE_PREFIX_PATH=${{env.INSTALL_DIR}}
          cmake --build . --config ${{ matrix.BUILD_TYPE }}

      - name: Package
        if: false # ${{ matrix.BUILD_TYPE == 'Release' }}
        working-directory: ${{env.BUILD_DIR}}
        run: |
          cmake --build . --config ${{ matrix.BUILD_TYPE }} --target install
          move /Y install\plugins\*crypto*.dll install\bin
          move /Y install\plugins\*ssl*.dll install\bin
          copy /Y C:\msys64\mingw64\bin\*.dll install\bin
          copy /Y ${{env.INSTALL_DIR}}\bin\*.dll install\bin
          copy /Y ${{env.INSTALL_DIR}}\lib\*.dll install\bin
          makensis ${{env.BUILD_DIR}}/Windows.nsi
          md5sum RabbitRemoteControl_setup_${{env.RabbitRemoteControl_VERSION}}.exe > RabbitRemoteControl_setup_${{env.RabbitRemoteControl_VERSION}}.exe.md5

#      - name: Update artifact
#        if: ${{ matrix.BUILD_TYPE == 'Release' }}
#        uses: actions/upload-artifact@v4
#        with:
#          name: ${{ env.artifact_name }}
#          path: |
#            ${{github.workspace}}/build/RabbitRemoteControl_Setup_${{env.RabbitRemoteControl_VERSION}}.exe
