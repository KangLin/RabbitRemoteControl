# Author: Kang Lin <kl222@126.com>

name: macos

on:
  workflow_call:
    outputs:
      name:
        description: "The artifact name"
        value: ${{ jobs.build_macos.outputs.name }}

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build_macos:
    strategy:
      matrix:
        include:
          - VCPKG_TARGET_TRIPLET: x64-osx
            os: macos-15-intel
            qt_version: 6.9.2
            qt_arch: clang_64
            WITH_MACOSX_BUNDLE: false

          - VCPKG_TARGET_TRIPLET: arm64-osx
            os: macos-14
            qt_version: 6.9.2
            qt_arch: clang_64
            WITH_MACOSX_BUNDLE: true
        
          - VCPKG_TARGET_TRIPLET: arm64-osx
            os: macos-14
            qt_version: 6.9.2
            qt_arch: clang_64
            WITH_MACOSX_BUNDLE: false
            
    # See: [About GitHub-hosted runners](https://docs.github.com/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners)
    # See: [Choosing the runner for a job](https://docs.github.com/actions/writing-workflows/choosing-where-your-workflow-runs/choosing-the-runner-for-a-job)
    # See: https://github.com/actions/runner-images/
    runs-on: ${{matrix.os}}

    env:
      BUILD_DIR:   ${{github.workspace}}/build
      SOURCE_DIR:  ${{github.workspace}}/.cache/source
      TOOLS_DIR:   ${{github.workspace}}/.cache/tools
      INSTALL_DIR: ${{github.workspace}}/.cache/install
      qt_modules: "qtscxml qtmultimedia qtserialport qt5compat qtwebsockets qtpositioning qtwebchannel qtwebengine"
      VCPKGGITCOMMITID: 7213cf8135c329c37c7e2778e40774489a0583a8
      VCPKG_TARGET_TRIPLET: ${{matrix.VCPKG_TARGET_TRIPLET}}
      VCPKG_DEFAULT_TRIPLET: ${{matrix.VCPKG_TARGET_TRIPLET}}
      VCPKG_MANIFEST_FEATURES: "freerdp,vnc,terminal"
      artifact_name: build_macos
      RabbitRemoteControl_VERSION: v0.0.36

    # Map the job outputs to step outputs
    outputs:
      name: ${{ env.artifact_name }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0
    
      - name: Make directories
        run: |
          cmake -E make_directory ${{env.BUILD_DIR}}
          cmake -E make_directory ${{env.SOURCE_DIR}}
          cmake -E make_directory ${{env.TOOLS_DIR}}
          cmake -E make_directory ${{env.INSTALL_DIR}}

      - name: Cache installed
        uses: actions/cache@v4
        id: cache-installed
        with:
          path: |
            ${{env.INSTALL_DIR}}
          key: install_macos_${{env.VCPKG_TARGET_TRIPLET}}

      - name: run-vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: ${{env.VCPKGGITCOMMITID}}
          vcpkgDirectory: ${{env.SOURCE_DIR}}/vcpkg          

      - name: install nasm
        run: |
          # See: https://formulae.brew.sh/
          brew update
          brew install nasm autoconf automake libtool pkg-config zstd libpcap libvncserver # pcapplusplus qt qtkeychain

      - name: build RabbitVNC
        if: false
        working-directory: ${{env.SOURCE_DIR}}
        run: |
          if [ ! -d ${{env.INSTALL_DIR}}/lib/cmake/RabbitVNC ]; then
            git clone --depth=1 https://github.com/KangLin/RabbitVNC.git
            cd ${{env.SOURCE_DIR}}/RabbitVNC
            cmake -E make_directory build
            cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} \
                -DBUILD_TESTS=OFF -DBUILD_VIEWER=OFF \
                -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake" \
                -DVCPKG_INSTALLED_DIR=${{env.INSTALL_DIR}}/RabbitVNC/vcpkg_installed \
                -DX_VCPKG_APPLOCAL_DEPS_INSTALL=ON \
                -DVCPKG_VERBOSE=ON \
                -DVCPKG_TARGET_TRIPLET=${{matrix.VCPKG_TARGET_TRIPLET}}
            cmake --build . --config Release
            cmake --install . --config Release --strip
          fi

      - name: build tigervnc
        #if: false #${{ matrix.BUILD_TYPE == 'Debug' }}
        working-directory: ${{env.SOURCE_DIR}}
        run: |
          if [ ! -d ${{env.INSTALL_DIR}}/lib/cmake/tigervnc ]; then
            git clone --depth=1 https://github.com/KangLin/tigervnc.git
            cd ${{env.SOURCE_DIR}}/tigervnc
            cmake -E make_directory build
            cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_POLICY_VERSION_MINIMUM=3.5 \
                -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} \
                -DBUILD_TESTS=OFF -DBUILD_VIEWER=OFF \
                -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake" \
                -DVCPKG_INSTALLED_DIR=${{env.INSTALL_DIR}}/tigervnc/vcpkg_installed \
                -DX_VCPKG_APPLOCAL_DEPS_INSTALL=ON \
                -DVCPKG_VERBOSE=ON \
                -DVCPKG_TARGET_TRIPLET=${{matrix.VCPKG_TARGET_TRIPLET}}
            cmake --build . --config Release
            cmake --install . --config Release --strip
          fi

      - name: pcapplusplus
        working-directory: ${{env.SOURCE_DIR}}
        run: |
          if [ ! -d ${{ env.INSTALL_DIR }}/lib/cmake/pcapplusplus ]; then
              git clone -b v25.05 --depth=1 https://github.com/seladb/PcapPlusPlus.git
              cd PcapPlusPlus
              cmake -E make_directory build
              cd build
              cmake .. -DCMAKE_BUILD_TYPE=Release \
                  -DCMAKE_POLICY_VERSION_MINIMUM=3.5 \
                  -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} \
                  -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake" \
                  -DX_VCPKG_APPLOCAL_DEPS_INSTALL=ON \
                  -DVCPKG_VERBOSE=ON \
                  -DVCPKG_TARGET_TRIPLET=${{matrix.VCPKG_TARGET_TRIPLET}} \
                  -DPCAPPP_BUILD_EXAMPLES=OFF \
                  -DPCAPPP_BUILD_TESTS=OFF \
                  -DPCAPPP_BUILD_TUTORIALS=OFF
              cmake --build . --config Release
              cmake --build . --config Release --target install
          fi

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          dir: '${{env.TOOLS_DIR}}/qt' # optional
          version: '${{matrix.qt_version}}' # optional, default is 5.15.2
          arch: '${{matrix.qt_arch}}' # optional
          modules: '${{env.qt_modules}}' # optional. See: https://ddalcino.github.io/aqt-list-server/
          cache: true
          cache-key-prefix: cached-qt_${{matrix.qt_version}}_${{matrix.qt_arch}}

      - name: build qxmpp
        working-directory: ${{env.SOURCE_DIR}}
        if: false
        run: |
          if [ ! -d ${{env.INSTALL_DIR}}/lib/cmake/qxmpp ]; then
            git clone -b v1.10.3 https://invent.kde.org/libraries/qxmpp.git
            cd qxmpp
            cmake -E make_directory build
            cd build
            cmake .. \
                -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF \
                -DCMAKE_INSTALL_PREFIX=${{env.INSTALL_DIR}} \
                -DCMAKE_PREFIX_PATH=${{env.INSTALL_DIR}}/lib/cmake \
                -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake" \
                -DX_VCPKG_APPLOCAL_DEPS_INSTALL=ON \
                -DVCPKG_VERBOSE=ON \
                -DVCPKG_TARGET_TRIPLET=${{matrix.VCPKG_TARGET_TRIPLET}}
            cmake --build . --config Release
            cmake --install . --config Release --strip
          fi

      - name: build QtService
        if: false
        working-directory: ${{env.SOURCE_DIR}}
        run: |
          if [ ! -d ${{env.INSTALL_DIR}}/lib/cmake/QtService ]; then
            git clone --depth=1 https://github.com/KangLin/qt-solutions.git
            cd qt-solutions/qtservice
            git submodule update --init --recursive
            cmake -E make_directory build
            cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} \
                -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake" \
                -DVCPKG_INSTALLED_DIR=${{env.INSTALL_DIR}}/QtService/vcpkg_installed \
                -DX_VCPKG_APPLOCAL_DEPS_INSTALL=ON \
                -DVCPKG_VERBOSE=ON \
                -DVCPKG_TARGET_TRIPLET=${{matrix.VCPKG_TARGET_TRIPLET}}                
            cmake --build . --config Release
            cmake --install . --config Release --strip
          fi

      - name: lxqt-build-tools
        working-directory: ${{env.SOURCE_DIR}}
        run: |
          if [ ! -d ${{ env.INSTALL_DIR }}/share/cmake/lxqt2-build-tools ]; then
              git clone -b 2.2.0 --depth=1 https://github.com/lxqt/lxqt-build-tools.git
              cd lxqt-build-tools
              cmake -E make_directory build
              cd build
              cmake .. -DCMAKE_BUILD_TYPE=Release \
                  -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} \
                  -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake" \
                  -DX_VCPKG_APPLOCAL_DEPS_INSTALL=ON \
                  -DVCPKG_VERBOSE=ON \
                  -DVCPKG_TARGET_TRIPLET=${{matrix.VCPKG_TARGET_TRIPLET}}
              cmake --build . --config Release
              cmake --build . --config Release --target install
          fi

      - name: qtermwidget
        working-directory: ${{env.SOURCE_DIR}}
        run: |
          if [ ! -d ${{ env.INSTALL_DIR }}/lib/cmake/qtermwidget6 ]; then
              git clone -b 2.2.0 --depth=1 https://github.com/lxqt/qtermwidget.git
              cd qtermwidget
              cmake -E make_directory build
              cd build
              cmake .. -DCMAKE_BUILD_TYPE=Release \
                  -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} \
                  -Dlxqt2-build-tools_DIR=${{ env.INSTALL_DIR }}/share/cmake/lxqt2-build-tools \
                  -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake" \
                  -DX_VCPKG_APPLOCAL_DEPS_INSTALL=ON \
                  -DVCPKG_VERBOSE=ON \
                  -DVCPKG_TARGET_TRIPLET=${{matrix.VCPKG_TARGET_TRIPLET}}
              cmake --build . --config Release
              cmake --build . --config Release --target install
          fi

      - name: qtkeychain
        if: false
        working-directory: ${{env.SOURCE_DIR}}
        run: |
            if [ ! -d ${{ env.INSTALL_DIR }}/lib/cmake/Qt6Keychain ]; then
                git clone -b 0.15.0 https://github.com/frankosterfeld/qtkeychain.git
                cd qtkeychain
                cmake -E make_directory build
                cd build
                cmake .. -DCMAKE_BUILD_TYPE=Release \
                    -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} \
                    -DBUILD_WITH_QT6:BOOL=ON \
                    -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake" \
                    -DX_VCPKG_APPLOCAL_DEPS_INSTALL=ON \
                    -DVCPKG_VERBOSE=ON \
                    -DVCPKG_TARGET_TRIPLET=${{matrix.VCPKG_TARGET_TRIPLET}}
                cmake --build . --config Release
                cmake --build . --config Release --target install
            fi

      - name: git clone RabbitCommon
        working-directory: ${{env.SOURCE_DIR}}
        run: git clone https://github.com/KangLin/RabbitCommon.git

      - name: Build RabbitRemoteControl BUNDLE
        if: ${{matrix.WITH_MACOSX_BUNDLE}}
        working-directory: ${{env.BUILD_DIR}}
        env:
          RabbitCommon_ROOT: ${{env.SOURCE_DIR}}/RabbitCommon
        run: |
          if [ "Release" == "Release" ]; then
              export BUILD_SERVICE=OFF
          else
              export BUILD_SERVICE=ON
          fi
          cmake ${{github.workspace}} \
              -DCMARK_SHARED=OFF \
              -DCMARK_TESTS=OFF \
              -DCMARK_STATIC=ON \
              -DWITH_CMARK=OFF \
              -DWITH_CMARK_GFM=ON \
              -DCMAKE_POLICY_VERSION_MINIMUM=3.5 \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/build/install \
              -DCMAKE_PREFIX_PATH=${{env.INSTALL_DIR}}/lib/cmake \
              -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake" \
              -DX_VCPKG_APPLOCAL_DEPS_INSTALL=ON \
              -DVCPKG_VERBOSE=ON \
              -DVCPKG_TARGET_TRIPLET=${{matrix.VCPKG_TARGET_TRIPLET}} \
              -DRABBIT_WITH_MACDEPLOY=OFF \
              -DWITH_MACOSX_BUNDLE=ON \
              -DBUILD_FREERDP=ON \
              -DINSTALL_QTKEYCHAIN=ON
          cmake --build . --config Release
          if [ "Release" == "Release" ]; then
            cmake --install . --config Release --component DependLibraries --strip
            cmake --install . --config Release --component Runtime --strip
            cmake --install . --config Release --component Plugin --strip
            cmake --install . --config Release --component Application --strip

            echo "Rename RabbitRemoteControlApp.app to RabbitRemoteControl.App"
            pushd install
            mv RabbitRemoteControlApp.app RabbitRemoteControl.App
            popd

            if [ -d "${{env.INSTALL_DIR}}/share/qtermwidget6" ]; then
                echo "Copy qtermwidget6 resources to install/RabbitRemoteControl.App/Contents/Resources/qtermwidget6 ......"
                cp -r "${{env.INSTALL_DIR}}/share/qtermwidget6/." install/RabbitRemoteControl.App/Contents/Resources/
            fi

            echo "Copy file to RabbitRemoteControl.App/Contents"
            rsync -av --exclude="RabbitRemoteControl.App" install/. install/RabbitRemoteControl.App/Contents

            echo "executable macdeployqt `pwd`/install/RabbitRemoteControl.App -verbose=3"
            macdeployqt `pwd`/install/RabbitRemoteControl.App -verbose=3

            7z a RabbitRemoteControl_${{env.RabbitRemoteControl_VERSION}}_${{matrix.os}}_bundle.zip ./install/RabbitRemoteControl.App
            lipo -info  `pwd`/install/RabbitRemoteControl.App/Contents/MacOS/RabbitRemoteControlApp
            otool -l `pwd`/install/RabbitRemoteControl.App/Contents/MacOS/RabbitRemoteControlApp | grep -A2 LC_RPATH
            otool -L `pwd`/install/RabbitRemoteControl.App/Contents/MacOS/RabbitRemoteControlApp
            lipo -info  `pwd`/install/RabbitRemoteControl.App/Contents/FrameWorks/libPlugin.dylib
            otool -l `pwd`/install/RabbitRemoteControl.App/Contents/FrameWorks/libPlugin.dylib | grep -A3 -B1 "LC_RPATH"
            otool -L `pwd`/install/RabbitRemoteControl.App/Contents/FrameWorks/libPlugin.dylib
            #lipo -info  `pwd`/install/RabbitRemoteControl.App/Contents/FrameWorks/QtGui.framework/QtGui
            #otool -l `pwd`/install/RabbitRemoteControl.App/Contents/FrameWorks/QtGui.framework/QtGui | grep -A3 -B1 "LC_RPATH"
            #otool -L `pwd`/install/RabbitRemoteControl.App/Contents/FrameWorks/QtGui.framework/QtGui

          else
            echo "cmake install config: Release component: Runtime Application Plugin"
            cmake --install . --config Release --component Runtime
            cmake --install . --config Release --component Plugin
            cmake --install . --config Release --component DependLibraries
            cmake --install . --config Release --component Application
          fi

      - name: Build RabbitRemoteControl
        if: ${{!matrix.WITH_MACOSX_BUNDLE}}
        working-directory: ${{env.BUILD_DIR}}
        env:
          RabbitCommon_ROOT: ${{env.SOURCE_DIR}}/RabbitCommon
        run: |
          if [ "Release" == "Release" ]; then
              export BUILD_SERVICE=OFF
          else
              export BUILD_SERVICE=ON
          fi
          cmake ${{github.workspace}} \
              -DCMARK_SHARED=OFF \
              -DCMARK_TESTS=OFF \
              -DCMARK_STATIC=ON \
              -DWITH_CMARK=OFF \
              -DWITH_CMARK_GFM=ON \
              -DCMAKE_POLICY_VERSION_MINIMUM=3.5 \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/build/RabbitRemoteControl.App/Contents \
              -DCMAKE_PREFIX_PATH=${{env.INSTALL_DIR}}/lib/cmake \
              -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake" \
              -DX_VCPKG_APPLOCAL_DEPS_INSTALL=ON \
              -DVCPKG_VERBOSE=ON \
              -DVCPKG_TARGET_TRIPLET=${{matrix.VCPKG_TARGET_TRIPLET}} \
              -DRABBIT_WITH_MACDEPLOY=OFF \
              -DWITH_WebEngineWidgets=ON \
              -DBUILD_FREERDP=ON \
              -DINSTALL_QTKEYCHAIN=ON
          cmake --build . --config Release
          if [ "Release" == "Release" ]; then
            cmake --install . --config Release --component DependLibraries --strip
            cmake --install . --config Release --component Runtime --strip
            cmake --install . --config Release --component Plugin --strip
            cmake --install . --config Release --component Application --strip

            if [ -d "${{env.INSTALL_DIR}}/share/qtermwidget6" ]; then
                echo "Copy qtermwidget6 resources to RabbitRemoteControl.App/Contents/Resources/qtermwidget6 ......"
                cp -r "${{env.INSTALL_DIR}}/share/qtermwidget6/." RabbitRemoteControl.App/Contents/Resources/
            fi

            echo "executable bin/macdeployqt `pwd`/RabbitRemoteControl.App -dmg -verbose=3"
            macdeployqt RabbitRemoteControl.App -dmg -verbose=3

            7z a RabbitRemoteControl_${{env.RabbitRemoteControl_VERSION}}_${{matrix.os}}.zip ./RabbitRemoteControl.App
            if [ -f RabbitRemoteControl.dmg ]; then
              cp RabbitRemoteControl.dmg RabbitRemoteControl_${{env.RabbitRemoteControl_VERSION}}_${{matrix.os}}.dmg
            fi
            
            lipo -info RabbitRemoteControl.App/Contents/MacOS/RabbitRemoteControlApp
            otool -l RabbitRemoteControl.App/Contents/MacOS/RabbitRemoteControlApp | grep -A2 LC_RPATH
            otool -L RabbitRemoteControl.App/Contents/MacOS/RabbitRemoteControlApp
            lipo -info RabbitRemoteControl.App/Contents/FrameWorks/libPlugin.dylib
            otool -l RabbitRemoteControl.App/Contents/FrameWorks/libPlugin.dylib | grep -A3 -B1 "LC_RPATH"
            otool -L RabbitRemoteControl.App/Contents/FrameWorks/libPlugin.dylib
            #lipo -info RabbitRemoteControl.App/Contents/FrameWorks/QtGui.framework/QtGui
            #otool -l RabbitRemoteControl.App/Contents/FrameWorks/QtGui.framework/QtGui | grep -A3 -B1 "LC_RPATH"
            #otool -L RabbitRemoteControl.App/Contents/FrameWorks/QtGui.framework/QtGui

          fi

      - name: Update configure file
        if: ${{ !matrix.WITH_MACOSX_BUNDLE }}
        working-directory: ${{github.workspace}}/build
        run: |
          echo "md5 RabbitRemoteControl_${{env.RabbitRemoteControl_VERSION}}_${{matrix.os}}.zip"
          md5 RabbitRemoteControl_${{env.RabbitRemoteControl_VERSION}}_${{matrix.os}}.zip
          MD5SUM=`md5 RabbitRemoteControl_${{env.RabbitRemoteControl_VERSION}}_${{matrix.os}}.zip|awk '{print $4}'`
          echo "RabbitRemoteControl_${{env.RabbitRemoteControl_VERSION}}_${{matrix.os}}.zip md5sum: ${MD5SUM}"
          RabbitRemoteControl.App/Contents/MacOS/RabbitRemoteControlApp \
            --file-name RabbitRemoteControl_${{env.RabbitRemoteControl_VERSION}}_${{matrix.os}}.zip \
            --md5 "${MD5SUM}" \
            -u "https://github.com/KangLin/RabbitRemoteControl/releases/download/v${{env.RabbitRemoteControl_VERSION}}/RabbitRemoteControl_${{env.RabbitRemoteControl_VERSION}}_${{matrix.os}}.zip;https://master.dl.sourceforge.net/project/rabbitremotecontrol/v${{env.RabbitRemoteControl_VERSION}}/RabbitRemoteControl_${{env.RabbitRemoteControl_VERSION}}_${{matrix.os}}.zip?viasf=1"

      - name: Update artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact_name }}_${{matrix.qt_version}}_${{matrix.qt_arch}}_${{matrix.os}}_${{matrix.WITH_MACOSX_BUNDLE}}
          path: |
            ${{github.workspace}}/build/RabbitRemoteControl_${{env.RabbitRemoteControl_VERSION}}_${{matrix.os}}.zip
            #${{github.workspace}}/build/RabbitRemoteControl_${{env.RabbitRemoteControl_VERSION}}_${{matrix.os}}_bundle.zip
            ${{github.workspace}}/build/update_macos_${{matrix.qt_version}}.json
            ${{github.workspace}}/build/RabbitRemoteControl_${{env.RabbitRemoteControl_VERSION}}_${{matrix.os}}.dmg
