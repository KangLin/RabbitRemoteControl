name: CMake mingw

on: [push]

jobs:
  build:
    name: build
  
    strategy:
      matrix:
        os: [windows-latest]
        BUILD_TYPE: [Release, Debug]
          
    runs-on: ${{ matrix.os }}
    env:
      # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
      BUILD_TYPE:  ${{ matrix.BUILD_TYPE }}
      
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        
    - name: git clone RabbitCommon
      working-directory: ${{runner.workspace}}
      run: git clone https://github.com/KangLin/RabbitCommon.git
      
    - name: apt helper action
      # You may pin to the exact commit or the version.
      # uses: ryankurte/action-apt@7356b2f8b9c6f8043a3d0ab3b991701dc817b759
      uses: ryankurte/action-apt@v0.2.0
      with:
        # architectures to pass to dpkg --add-architecture
        #architectures: # optional
        # apt packages to install
        packages: mingw-w64-x86-64-dev libvncserver-dev freerdp2-dev libssh-dev liblog4cplus-dev
      if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-18.04' }}
      
    - name: install msys2 packages
      uses: msys2/setup-msys2@v2
      if: ${{ matrix.os == 'windows-latest' }}
      with:
        update: true
        install: >-
          git
          cmake
          base-devel
          mingw-w64-x86_64-libvncserver
          mingw-w64-x86_64-qt5
      
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -G"MinGW Makefiles" -DCMAKE_INSTALL_PREFIX=${{runner.workspace}}/build/install -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/cmake/platforms/toolchain-mingw.cmake
      env:
        RabbitCommon_DIR: ${{runner.workspace}}/RabbitCommon
        MSYSTEM: MINGW64

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE --target install-runtime 
      env:
        MSYSTEM: MINGW64

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
