name: CMake

on: [push]
  
jobs:
  use_install_qt:
    name: use install qt ${{ matrix.os }}-${{ matrix.BUILD_TYPE }}
  
    strategy:
      matrix:
        os: [ windows-latest ]
        # macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            triplet: x64-windows
          #- os: ubuntu-latest
          #  triplet: x64-linux
          #- os: macos-latest
          #  triplet: x64-osx
        BUILD_TYPE: [Release, Debug]
        qt_version: [5.12.9]
    runs-on: ${{ matrix.os }}

    env:
      BUILD_TYPE:  ${{ matrix.BUILD_TYPE }}
      SOURCE_DIR:  ${{github.workspace}}/source
      TOOSL_DIR:   ${{github.workspace}}/tools
      INSTALL_DIR: ${{github.workspace}}/install

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: make_directory
      run: |
        cmake -E make_directory ${{env.SOURCE_DIR}}
        cmake -E make_directory ${{env.TOOSL_DIR}}
        cmake -E make_directory ${{env.INSTALL_DIR}}

    - name: run-vcpkg
      # You may pin to the exact commit or the version.
      # uses: lukka/run-vcpkg@a1b6a0046a28c09f4bcc8caa9eecec9a8e512152
      uses: lukka/run-vcpkg@v6.1
      with:
        # Indicates whether to only setup vcpkg (i.e. installing it and setting the environment variables VCPKG_ROOT, RUNVCPK_VCPKG_ROOT), without installing any port.
        #setupOnly: # optional
        vcpkgGitURL: https://github.com/KangLin/vcpkg.git
        vcpkgGitCommitId: 37b05428f33d148ad849f5c4e4e84ac33d60299a
        vcpkgDirectory: ${{ runner.workspace }}/vcpkg/
        vcpkgTriplet: '${{ matrix.triplet }}'
        vcpkgArguments: 'openssl libssh freerdp'

    - name: git clone libvncserver
      working-directory: ${{env.SOURCE_DIR}}
      run: |
        git clone https://github.com/KangLin/libvncserver.git 
        cd ${{env.SOURCE_DIR}}/libvncserver
        cmake -E make_directory build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.BUILD_TYPE }} -DWITH_OPENSSL=ON -DWITH_GCRYPT=OFF -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -DCMAKE_TOOLCHAIN_FILE=${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake
        cmake --build . --config ${{ matrix.BUILD_TYPE }}
        cmake --build . --config ${{ matrix.BUILD_TYPE }} --target install

#     - name: Build libvncserver with CMake
#       uses: lukka/run-cmake@main
#       with:
#         useVcpkgToolchainFile: true
#         cmakeListsOrSettingsJson: 'CMakeListsTxtBasic'
#         cmakeListsTxtPath: ${{env.SOURCE_DIR}}/libvncserver
#         buildDirectory: ${{ runner.workspace }}/build/libvncserver
#         cmakeBuildType: ${{ matrix.BUILD_TYPE }}
#         cmakeAppendedArgs: -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }}

    - name: git clone RabbitCommon
      working-directory: ${{runner.workspace}}
      run: git clone https://github.com/KangLin/RabbitCommon.git

    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v1
      with:
        path: ${{env.TOOSL_DIR}}/qt
        key: ${{ runner.os }}-QtCache
        
    - name: Install Qt
      # You may pin to the exact commit or the version.
      # uses: jurplel/install-qt-action@a962fb91949c8e846a3e4a944d50e7ef5cc3a28a
      uses: jurplel/install-qt-action@v2.11.1
      with:
        # Directory to install Qt
        dir: ${{env.TOOSL_DIR}}/qt # optional
        # Version of Qt to install
        version: ${{matrix.qt_version}} # optional, default is 5.15.2
        # Host platform
        #host: linux # optional
        # Target platform for build
        target: desktop # optional, default is desktop
        # Architecture for Windows/Android
        #arch: # optional
        # Whether or not to install Qt dependencies on Linux
        install-deps: true # optional, default is true
        # Additional Qt modules to install
        modules: none # optional
        # Force a Qt mirror in case the default is not working
        #mirror: # optional
        # Whether or not to actually download Qt
        cached: ${{ steps.cache-qt.outputs.cache-hit }} # optional, default is false
        # Whether or not to automatically run setup-python to find a valid python version.
        setup-python: false # optional, default is true
        # Qt tools to download--specify comma-separated argument lists which are themselves separated by spaces: <tool_name>,<tool_version>,<tool_arch>
        #tools: # optional
        # Whether or not to actually install Qt or just the tools from the tools argument
        tools-only: false # optional, default is false
        # Version of aqtinstall to use in case of issues
        #aqtversion: # optional, default is ==0.10.0
        # Version of py7zr to use in case of issues
        #py7zrversion: # optional, default is ==0.11.0
        # Any extra arguments to append to the back
        #extra: # optional
        
    - name: build RabbitRemoteControl
      working-directory: ${{runner.workspace}}/build
      env:
        RabbitCommon_DIR: ${{runner.workspace}}/RabbitCommon
      run: |
        cmake -E make_directory ${{runner.workspace}}/build
#        cmake ${{github.workspace}} -DCMAKE_BUILD_TYPE=${{ matrix.BUILD_TYPE }} -DCMAKE_INSTALL_PREFIX=${{ runner.workspace }}/build/install -DCMAKE_PREFIX_PATH=${{ env.INSTALL_DIR }} -DCMAKE_TOOLCHAIN_FILE=${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake
#        cmake --build . --config ${{ matrix.BUILD_TYPE }}
#        cmake --build . --config ${{ matrix.BUILD_TYPE }} --target install

    - name: Package
      working-directory: ${{runner.workspace}}/build
      shell: cmd
      run: |
        makensis ${{runner.workspace}}/build/Install.nsi
        ${{runner.workspace}}/build/install/bin/RabbitRemoteControlApp.exe -f "${{runner.workspace}}/build/update_windows.xml" -pf RabbitRemoteControl-Setup-v0.0.1.exe -m "v0.0.1"
      if: ${{ matrix.os == 'windows-latest' }}
      
    - name: update 
      uses: actions/upload-artifact@v2
      with:
        name: rabbitremotecontrol_${{ matrix.os }}
        path: ${{runner.workspace}}/build/RabbitRemoteControl-Setup-*.exe
      if: ${{ matrix.os == 'windows-latest' }}
     
    - name: Upload To Github Release
      # You may pin to the exact commit or the version.
      # uses: xresloader/upload-to-github-release@3ad14478ee4fb9bd65e84c6d496a7d6862892f43
      uses: xresloader/upload-to-github-release@v1.2.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # The files or file patterns to upload. You can upload multiple files by split them by semicolon. You can use the glob pattern to find the files.
        file: ${{runner.workspace}}/build/RabbitRemoteControl-Setup-*.exe;${{runner.workspace}}/build/update_*.xml # default is 
        # The files or file patterns to delete before uploading new files. You can delete multiple files by split them by semicolon. You can use the glob pattern to find the files.
        #delete_file: # optional, default is 
        # If you need to overwrite existing files, add overwrite: true to the with.
        #overwrite: # optional, default is false
        # The resultant deployment is a draft Release that only repository collaborators can see. This gives you an opportunity to examine and edit the draft release.
        draft: false # optional, default is true
        # The resultant deployment is a Prerelease. This gives you an opportunity to examine and edit the prerelease.
        prerelease: true # optional, default is false
        # With tags: true, your Releases deployment will trigger if and only if the build is a tagged build.
        tags: true # optional, default is false
        # Only work on these branches(splited by semicolon), set to nothing to accept all branches.
        branches: master # optional, default is 
        # With verbose: true, be verbose.
        verbose: true # optional, default is false
        # Set custom tag name.
        tag_name: v0.0.1 # optional, default is 
        # If try to update latest release.
        update_latest_release: true # optional, default is false
      if: ${{ matrix.BUILD_TYPE == 'Release' }}
