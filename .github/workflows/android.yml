name: android

on:
  workflow_call:
    outputs:
      name:
        description: "The artifact name"
        value: ${{ jobs.build_android.outputs.name }}

jobs:
  build_android:

    strategy:
      matrix:
        BUILD_TYPE: [Release]
        qt_arch: [android_arm64_v8a, android_x86_64]
        qt_version: [6.6.1]
        include:
          - BUILD_TYPE: Release
            qt_arch: android_arm64_v8a
            VCPKG_TARGET_TRIPLET: arm64-android

          - BUILD_TYPE: Release
            qt_arch: android_x86_64 
            VCPKG_TARGET_TRIPLET: x64-android

    runs-on: ubuntu-latest

    env:
      VCPKGGITCOMMITID: a1a1cbc975abf909a6c8985a6a2b8fe20bbd9bd6
      VCPKG_ROOT:  ${{github.workspace}}/.cache/source/vcpkg
      SOURCE_DIR:  ${{github.workspace}}/.cache/source
      TOOSL_DIR:   ${{github.workspace}}/.cache/tools
      INSTALL_DIR: ${{github.workspace}}/.cache/install
      STOREPASS: ${{secrets.STOREPASS}}
      RabbitRemoteControl_VERSION: v0.0.26

      artifact_name: build_android
      ANDROID_PLATFORM: android-23
      ANDROID_NATIVE_API_LEVEL: 23
      qt_modules: 'qtimageformats qtmultimedia qtscxml'

    # Map the job outputs to step outputs
    outputs:
      name: ${{ env.artifact_name }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: make directory
        run: |
          cmake -E make_directory ${{env.SOURCE_DIR}}
          cmake -E make_directory ${{env.TOOSL_DIR}}
          cmake -E make_directory ${{env.INSTALL_DIR}}
          cmake -E make_directory ${{github.workspace}}/build

      - name: Cache installed
        uses: actions/cache@v2
        id: cache-installed
        with:
          path: |
            ${{env.INSTALL_DIR}}
          key: cached-install-android-qt${{matrix.qt_version}}-${{matrix.qt_arch}}-${{matrix.BUILD_TYPE}}

      - name: run-vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          # Indicates whether to only setup vcpkg (i.e. installing it and setting the environment variables VCPKG_ROOT, RUNVCPK_VCPKG_ROOT), without installing any port.
          #setupOnly: # optional
          #vcpkgGitURL: https://github.com/KangLin/vcpkg.git
          vcpkgGitCommitId: ${{env.VCPKGGITCOMMITID}}
          vcpkgDirectory: ${{ runner.workspace }}/vcpkg/
          
      - name: run vcpkg
        if: false
        run: |
          vcpkg install --triplet=${{matrix.VCPKG_TARGET_TRIPLET}} \
              --x-feature=vnc

      - name: Build libvncserver
        working-directory: ${{env.SOURCE_DIR}}
        run: |
          if [ ! -d ${{env.INSTALL_DIR}}/lib/cmake/LibVNCServer ]; then
            git clone https://github.com/KangLin/libvncserver.git
            cd libvncserver
            #git checkout -b 5deb43e2837e05e5e24bd2bfb458ae6ba930bdaa 5deb43e2837e05e5e24bd2bfb458ae6ba930bdaa
            cmake -E make_directory build
            cd build
            cmake .. \
                -DWITH_OPENSSL=ON -DWITH_GCRYPT=OFF \
                -DBUILD_TESTS=OFF -DBUILD_EXAMPLES=OFF \
                -DCMAKE_BUILD_TYPE=${{ matrix.BUILD_TYPE }} \
                -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} \
                -DCMAKE_TOOLCHAIN_FILE=${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake \
                -DVCPKG_CHAINLbuildOAD_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
                -DANDROID_ABI=${{matrix.ANDROID_ABI}} \
                -DANDROID_PLATFORM=${{matrix.ANDROID_PLATFORM}}
            cmake --build . --config ${{ matrix.BUILD_TYPE }}
            cmake --build . --config ${{ matrix.BUILD_TYPE }} --target install
          fi

#    - name: build FreeRDP
#      working-directory: ${{env.SOURCE_DIR}}
#      run: |
#        if [ ! -d ${{env.INSTALL_DIR}}/lib/cmake/FreeRDP2 ]; then
#            git clone -b 2.5.0 https://github.com/FreeRDP/FreeRDP.git
#            cd FreeRDP
#            git submodule update --init --recursive
#            cmake -E make_directory build
#            cd build
#            cmake .. \
#                -DOpenSSL_ROOT_DIR=${{env.RUNVCPKG_VCPKG_INSTALLATION_ROOT}}/installed/${{env.RUNVCPKG_VCPKG_TRIPLET_OUT}} \
#                -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} \
#                -DCMAKE_INSTALL_PREFIX="${{env.INSTALL_DIR}}" \
#                -DCMAKE_TOOLCHAIN_FILE=${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake \
#                -DVCPKG_CHAINLOAD_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
#                -DANDROID_ABI=${{matrix.ANDROID_ABI}} \
#                -DANDROID_PLATFORM=${{matrix.ANDROID_PLATFORM}}
#            cmake --build . --config ${{matrix.BUILD_TYPE}}
#            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
#        fi

      - name: build tigervnc
        working-directory: ${{env.SOURCE_DIR}}
        run: |
          if [ ! -d ${{env.INSTALL_DIR}}/lib/cmake/tigervnc ]; then
              git clone https://github.com/KangLin/tigervnc.git 
              cd ${{env.SOURCE_DIR}}/tigervnc
              cmake -E make_directory build
              cd build
              cmake .. \
                -DBUILD_TESTS=OFF -DBUILD_VIEWER=OFF \
                -DCMAKE_BUILD_TYPE=${{ matrix.BUILD_TYPE }} \
                -DCMAKE_INSTALL_PREFIX="${{ env.INSTALL_DIR }}" \
                -DCMAKE_TOOLCHAIN_FILE=${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake \
                -DVCPKG_CHAINLOAD_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
                -DANDROID_ABI=${{matrix.ANDROID_ABI}} \
                -DANDROID_PLATFORM=${{matrix.ANDROID_PLATFORM}}
              cmake --build . --config ${{ matrix.BUILD_TYPE }}
              cmake --build . --config ${{ matrix.BUILD_TYPE }} --target install
          fi

      - name: Install Qt of gcc_64
        uses: jurplel/install-qt-action@v3
        with:
          dir: '${{env.TOOSL_DIR}}/qt' # optional
          version: '${{matrix.qt_version}}'
          #host: 'linux'
          target: 'desktop'
          arch: 'gcc_64'
          set-env: false
          cache: true
          cache-key-prefix: cached_qt

      - name: Install Qt of android
        uses: jurplel/install-qt-action@v3
        with:
          # Directory to install Qt
          dir: '${{env.TOOSL_DIR}}/qt' # optional
          # Version of Qt to install
          version: '${{matrix.qt_version}}'
          # Host platform
          #host: linux # optional
          # Target platform for build
          target: 'android' # optional, default is desktop
          # Architecture for Windows/Android
          arch: '${{matrix.qt_arch}}' # optional
          # Additional Qt modules to install
          modules: '${{env.qt_modules}}' # optional. See: https://ddalcino.github.io/aqt-list-server/
          cache: true
          cache-key-prefix: cached_qt

      - name: build qxmpp
        if: false
        working-directory: ${{env.SOURCE_DIR}}
        env:
          QT_ROOT: ${{env.Qt5_Dir}}
        run: |
          if [ ! -d ${{env.INSTALL_DIR}}/lib/cmake/qxmpp ]; then
            git clone -b v1.2.1 "https://github.com/qxmpp-project/qxmpp.git"
            cd qxmpp
            cmake -E make_directory build
            cd build
            cmake .. -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF \
                -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} \
                -DQt5_DIR=${{env.QT_ROOT}}/lib/cmake/Qt5 \
                -DQt5Core_DIR=${{env.QT_ROOT}}/lib/cmake/Qt5Core \
                -DQt5Gui_DIR=${{env.QT_ROOT}}/lib/cmake/Qt5Gui \
                -DQt5Test_DIR=${{env.QT_ROOT}}/lib/cmake/Qt5Test \
                -DQt5Xml_DIR=${{env.QT_ROOT}}/lib/cmake/Qt5Xml \
                -DQt5Network_DIR=${{env.QT_ROOT}}/lib/cmake/Qt5Network \
                -DCMAKE_INSTALL_PREFIX=${{env.INSTALL_DIR}} \
                -DCMAKE_PREFIX_PATH=${{env.QT_ROOT}} \
                -DCMAKE_TOOLCHAIN_FILE=${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake \
                -DVCPKG_CHAINLOAD_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
                -DANDROID_ABI=${{matrix.ANDROID_ABI}} \
                -DANDROID_PLATFORM=${{matrix.ANDROID_PLATFORM}}
            cmake --build . --config ${{matrix.BUILD_TYPE}}
            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
          fi

      - name: git clone RabbitCommon
        working-directory: ${{env.SOURCE_DIR}}
        run: git clone https://github.com/KangLin/RabbitCommon.git

      - name: build RabbitRemoteControl
        working-directory: ${{github.workspace}}/build
        env:
          RabbitCommon_DIR: ${{env.SOURCE_DIR}}/RabbitCommon
          QT_ANDROID_KEYSTORE_PATH: ${{env.SOURCE_DIR}}/RabbitCommon/RabbitCommon.keystore
          QT_ANDROID_KEYSTORE_ALIAS: rabbitcommon
          QT_ANDROID_KEYSTORE_STORE_PASS: ${{secrets.STOREPASS}}
        run: |
          sudo chmod 777 ${Qt6_DIR}/bin/qt-cmake
          ${Qt6_DIR}/bin/qt-cmake ${{github.workspace}} \
            -DCMARK_SHARED=OFF \
            -DCMARK_TESTS=OFF \
            -DCMARK_STATIC=ON \
            -DBUILD_FREERDP=ON \
            -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} \
            -DCMAKE_INSTALL_PREFIX=`pwd`/install \
            -DQT_HOST_PATH=${Qt6_DIR}/../gcc_64 \
            -DANDROID_PLATFORM=${{env.ANDROID_PLATFORM}} \
            -DANDROID_NATIVE_API_LEVEL=${{env.ANDROID_NATIVE_API_LEVEL}} \
            -DQT_ANDROID_SIGN_APK=ON \
            -DQT_ENABLE_VERBOSE_DEPLOYMENT=OFF \
            -DQt6LinguistTools_DIR=${Qt6_DIR}/../gcc_64/lib/cmake/Qt6LinguistTools \
            -DLibVNCServer_DIR="${{env.INSTALL_DIR}}/lib/cmake/LibVNCServer" \
            -Dtigervnc_DIR=${{env.INSTALL_DIR}}/lib/cmake \
            -DQXmpp_DIR=${{env.INSTALL_DIR}}/lib/cmake/qxmpp
          cmake --build . --config ${{matrix.BUILD_TYPE}} --target all
          cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
          APK_FILE=`find . -name "android-*.apk"`
          cp $APK_FILE RabbitRemoteControl_${{env.Calendar_VERSION}}_${{matrix.qt_arch}}_qt${{matrix.qt_version}}_${{matrix.BUILD_TYPE}}.apk

      - name: Update artifact
        #if: ${{ matrix.BUILD_TYPE == 'Release' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.artifact_name }}
          path: |
            ${{github.workspace}}/build/RabbitRemoteControl_${{env.Calendar_VERSION}}_${{matrix.qt_arch}}_qt${{matrix.qt_version}}_${{matrix.BUILD_TYPE}}.apk
