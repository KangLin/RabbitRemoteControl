# 参见：https://github.com/KangLin/Documents/blob/master/qt/log4qt.md

#设置储存log文件的根目录
logpath=../log

#格式化符号说明：
# %p：输出日志信息的优先级，即DEBUG，INFO，WARN，ERROR，FATAL。
# %d：输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，如：%d{yyyy/MM/dd HH:mm:ss,SSS}。
# %r：输出自应用程序启动到输出该log信息耗费的毫秒数。
# %t：输出产生该日志事件的线程名。
# %l：输出日志事件的发生位置，相当于%c.%M(%F:%L)的组合，包括类全名、方法、文件名以及在代码中的行数。例如：test.TestLog4j.main(TestLog4j.java:10)。
# %c：输出日志信息所属的类目，通常就是所在类的全名。
# %M：输出产生日志信息的方法名。
# %F：输出日志消息产生时所在的文件名称。
# %L:：输出代码中的行号。
# %m:：输出代码中指定的具体日志信息。
# %n：输出一个回车换行符，Windows平台为"\r\n"，Unix平台为"\n"。
# %x：输出和当前线程相关联的NDC(嵌套诊断环境)，尤其用到像java servlets这样的多客户多线程的应用中。
# %%：输出一个"%“字符。
# 另外，还可以在%与格式字符之间加上修饰符来控制其最小长度、最大长度、和文本的对齐方式。如：
# c：指定输出category的名称，最小的长度是20，如果category的名称长度小于20的话，默认的情况下右对齐。
# 2)%-20c：”-"号表示左对齐。
# 3)%.30c：指定输出category的名称，最大的长度是30，如果category的名称长度大于30的话，就会将左边多出的字符截掉，但小于30的话也不会补空格。
logConversionPattern=%F:%L [%d] [%t] %5p %c - %m%n

log4j.reset=true
log4j.Debug=WARN
log4j.threshold=NULL
#在运行中，是否监视此文件配置的变化
log4j.watchThisFile=false
#设置是否监听QDebug输出的字符串
log4j.handleQtMessages=true
# QLoggingCategory 过滤规则
#log4j.qtLogging.filterRules=
#log4j.qtLogging.messagePattern=

#rootLogger 输出
# log4j.rootLogger 日志输出类别和级别：只输出不低于该级别的日志信息	DEBUG < INFO < WARN < ERROR < FATAL
#设置日志输出的几种输出源（appender）。
# log4j.rootLogger 格式：[ level ] , appenderName1, appenderName2, …
#     level ：设定日志记录的最低级别，
#        可设的值有 OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL 或者自定义的级别，Log4j建议只使用中间四个级别。
#        通过在这里设定级别，您可以控制应用程序中相应级别的日志信息的开关，比如在这里设定了INFO级别，则应用程序中所有DEBUG级别的日志信息将不会被打印出来。
#        只输出不低于该级别的日志信息	DEBUG < INFO < WARN < ERROR < FATAL
#     appenderName：就是指定日志信息要输出到哪里。可以同时指定多个输出目的地，用逗号隔开。本例是：console, daily
log4j.rootLogger=ALL, console, daily

###############################
# 输出到控制台
###############################

# 配置INFO CONSOLE输出到控制台
log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.target=System.out
# 输入日志等级,默认值是 DEBUG
#log4j.appender.console.Threshold=DEBUG
# 配置CONSOLE设置为自定义布局模式
log4j.appender.console.layout=org.apache.log4j.PatternLayout
# 配置logfile为自定义布局模式
log4j.appender.console.layout.ConversionPattern=${logConversionPattern}

###############################
# 输出到日志文件中
###############################

# 配置 logfile 输出到文件中 每日产生文件
log4j.appender.daily=org.apache.log4j.DailyFileAppender
# 输出文件位置此为项目根目录下的logs文件夹中
log4j.appender.daily.file=${logpath}/root.log
#true表示消息增加到指定文件中，false 则将消息覆盖指定的文件内容，默认值是 false
log4j.appender.daily.appendFile=true
# 日期格式
log4j.appender.daily.datePattern=_yyyy_MM_dd
# 立即输出。表示所有消息都会被立即输出，设为 false 则不立即输出，默认值是 true
log4j.appender.daily.immediateFlush=true
# 输入日志等级,默认值是 DEBUG
log4j.appender.daily.Threshold=DEBUG
# 设置保留天数
log4j.appender.daily.keepDays=10
# 配置logfile为自定义布局模式
log4j.appender.daily.layout=org.apache.log4j.PatternLayout
log4j.appender.daily.layout.ConversionPattern=${logConversionPattern}
